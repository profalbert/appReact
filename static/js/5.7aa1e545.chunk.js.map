{"version":3,"sources":["components/common/FormControls/FormControls.tsx","components/common/FormControls/FormControls.module.css","utils/validators/validators.ts","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["FormControl","meta","individerror","children","hasError","error","submitFailed","touched","className","s","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","type","validate","module","exports","maxLengthCreator","maxLength","value","length","required","withoutSpace","replace","DialogItem","dialog","active","activeClassName","to","id","Message","message","maxLengthCreator50","AddMessageFormRedux","reduxForm","form","onSubmitSuccess","result","dispatch","reset","handleSubmit","messagesForm","onSubmit","messagesFormField","messagesFormButton","Dialogs","state","dialogsPage","dialogsElements","dialogsData","map","d","key","messagesElements","messagesData","m","dialogs","dialogsItems","dialogsItemsTitle","messages","messagesItem","values","newMessageBody","sendMessage","mapStateToPropsForRedirect","isAuth","auth","withAuthRedirect","WrappedComponent","RedirectComponent","this","React","Component","connect","mapDispatchToProps","dialogsActions","sendMessageCreator","DialogsContainer","compose"],"mappings":"sRAWaA,EAA8C,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,SAC3EC,EAAW,KAMf,OAJEA,EADmB,aAAjBF,EACSD,EAAKI,OAASJ,EAAKK,aAEnBL,EAAKI,OAASJ,EAAKM,QAG9B,yBAAKC,UAAWC,IAAEC,YAAc,KAAON,EAAWK,IAAEJ,MAAQ,KAC1D,6BACGF,GAEFC,GAAY,8BAAOH,EAAKI,SAalBM,EAAgE,SAACC,GAAW,IAChFC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBX,KADwE,YAClDW,EADkD,mBAEtF,OACE,kBAACZ,EAAgBY,EACf,8CAAcC,EAAWC,MAMlBC,EAA6D,SAACH,GAAW,IAC7EC,EAAwCD,EAAxCC,MAA2BC,GAAaF,EAAjCX,KAAiCW,EAA3BJ,UAD+D,YACpCI,EADoC,+BAEnF,OACE,kBAACZ,EAAgBY,EACf,2CAAWC,EAAWC,MAQfE,EAAc,SAA+BC,EAAqBC,EAC7EC,EAAuCC,EACvCC,GAA8B,IAAhBT,EAAe,uDAAP,GAEtB,OACE,6BACE,kBAAC,IAAD,eAAOU,SAAUH,EACZD,KAAMA,EAAMG,KAAMA,EAClBD,UAAWA,EAAWH,YAAaA,GAC/BL,O,oBClEfW,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,uCAAuC,qBAAuB,2CAA2C,2BAA6B,iDAAiD,UAAY,gCAAgC,UAAY,gCAAgC,cAAgB,oCAAoC,sBAAwB,4CAA4C,aAAe,mCAAmC,gBAAkB,sCAAsC,WAAa,iCAAiC,aAAe,mCAAmC,UAAY,gCAAgC,mBAAqB,yCAAyC,QAAU,8BAA8B,mBAAqB,yCAAyC,iBAAmB,uCAAuC,iBAAmB,uCAAuC,qBAAuB,2CAA2C,yBAA2B,+CAA+C,qBAAuB,6C,iCCCjrC,sGAAO,IAAMC,EAAmB,SAACC,GAAD,OAA2C,SAACC,GAC1E,OAAIA,GAASA,EAAMC,OAASF,EACpB,iBAAN,OAAwBA,EAAxB,iBAEA,IAISG,EAA+B,SAACF,GAC3C,OAAIA,OACF,EAEO,qBAIEG,EAAmC,SAACH,GAC/C,OAAIA,EACQA,EAAMI,QAAQ,MAAO,SAI7B,EAFO,+BAKT,I,oBC1BJR,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,kBAAoB,mCAAmC,SAAW,0BAA0B,aAAe,8BAA8B,aAAe,8BAA8B,kBAAoB,mCAAmC,mBAAqB,sC,qFCmBtXQ,EATyB,SAACpB,GACxC,OACC,yBAAKJ,UAAWC,IAAEwB,OAAS,IAAMxB,IAAEyB,QAClC,kBAAC,IAAD,CAASC,gBAAiB1B,IAAEyB,OAAQE,GAAE,mBAAcxB,EAAMyB,KAAOzB,EAAMM,QCI3DoB,EATsB,SAAC1B,GACrC,OACC,yBAAKJ,UAAWC,IAAE8B,SAChB3B,EAAM2B,U,mCCmCJC,EAAqBf,YAAiB,IAiBtCgB,EAAsBC,YAAoC,CAC9DC,KAAM,uBACNC,gBALkB,SAACC,EAAgBC,GAAjB,OAClBA,EAASC,YAAM,2BAEWL,EAfkD,SAAC,GAAoB,IAAnBM,EAAkB,EAAlBA,aAC9E,OACE,0BAAMxC,UAAWC,IAAEwC,aAAcC,SAAUF,GACzC,6BACGhC,YAA0C,qBAAsB,iBAAkB,CAACa,IAAUW,EAAoBV,KAClHnB,IAAU,OAAQ,CAACT,aAAc,WAAYM,UAAWC,IAAE0C,qBAE5D,6BAAK,4BAAQ3C,UAAWC,IAAE2C,oBAArB,aAcIC,EAnDsB,SAACzC,GACpC,IAAI0C,EAAQ1C,EAAM2C,YACdC,EAAkBF,EAAMG,YAAYC,KAAK,SAAAC,GAAC,OAAG,kBAAC,EAAD,CAAYzC,KAAMyC,EAAEzC,KAAM0C,IAAKD,EAAEtB,GAAIA,GAAIsB,EAAEtB,QACxFwB,EAAmBP,EAAMQ,aAAaJ,KAAK,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASxB,QAASwB,EAAExB,QAASqB,IAAKG,EAAE1B,QAMxF,OACC,yBAAK7B,UAAWC,IAAEuD,SACjB,yBAAKxD,UAAWC,IAAEwD,cAChB,yBAAKzD,UAAWC,IAAEyD,mBAAlB,eACEV,GAEJ,yBAAKhD,UAAWC,IAAE0D,UAChB,yBAAK3D,UAAWC,IAAE2D,cAAgBP,GACnC,kBAACpB,EAAD,CAAqBS,SAZJ,SAACmB,GAChBA,EAAOC,gBAAmB1D,EAAM2D,YAAYF,EAAOC,sB,gECbtDE,EAA6B,SAAClB,GAChC,MAAO,CACPmB,OAAQnB,EAAMoB,KAAKD,SAoBNE,EAfU,SAACC,GAA2C,IAC7DC,EAD4D,uKAEtD,IAAD,EACsBC,KAAKlE,MAA7B6D,EADE,EACFA,OAAW3D,EADT,0BAET,OAAK2D,EAED,kBAACG,EAAqB9D,GAFN,kBAAC,IAAD,CAAUsB,GAAI,eAJ8B,GAClC2C,IAAMC,WAUtC,OADqCC,YAAiDT,EAAjDS,CAA6EJ,I,QCHhHK,EAA4C,CAC9CX,YAAaY,IAAeC,oBAIxBC,EAAmBC,YACvBL,aAXoB,SAAC3B,GACrB,MAAO,CACLC,YAAaD,EAAMC,eASyE2B,GAC9FP,EAFuBW,CAGvBjC,GAEagC","file":"static/js/5.7aa1e545.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './FormControls.module.css';\r\nimport {Field, WrappedFieldProps, WrappedFieldMetaProps} from 'redux-form';\r\nimport { FieldValidatorType } from '../../../utils/validators/validators';\r\n\r\n\r\ntype FormControlPropsType = {\r\n  meta: WrappedFieldMetaProps\r\n  individerror: string\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta, individerror, children}) => {\r\n  let hasError = null;\r\n  if (individerror === \"onSubmit\") {\r\n    hasError = meta.error && meta.submitFailed;\r\n  } else {\r\n    hasError = meta.error && meta.touched;\r\n  }\r\n  return (\r\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n      <div>\r\n        {children}\r\n      </div>  \r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\ntype componentOwnPropsType = {\r\n  individerror: string\r\n  className: string\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps & componentOwnPropsType> = (props) => {\r\n  const {input, meta, ...restProps} = props\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps}></textarea>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\n\r\nexport const Input: React.FC<WrappedFieldProps & componentOwnPropsType> = (props) => {\r\n  const {input, meta, className, ...restProps} = props\r\n  return (\r\n    <FormControl {...props}> \r\n      <input {...input} {...restProps}/>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport const createField = <FormKeysType extends string> (placeholder: string, name: FormKeysType, // extends string - это ограничение на тип дженерика (только строка)\r\n  validators: Array<FieldValidatorType>, component: string | React.FC<WrappedFieldProps & componentOwnPropsType>, \r\n  type: string, props = {}) => {\r\n\r\n  return (\r\n    <div>\r\n      <Field validate={validators} \r\n           name={name} type={type}\r\n           component={component} placeholder={placeholder}\r\n           {...props}/>\r\n    </div>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__3IXMz\",\"error\":\"FormControls_error__3E5dj\",\"formSummaryError\":\"FormControls_formSummaryError__3P5bD\",\"formSummaryErrorWrap\":\"FormControls_formSummaryErrorWrap__38Pki\",\"formSummaryErrorLoginBlock\":\"FormControls_formSummaryErrorLoginBlock__1YgxW\",\"formTitle\":\"FormControls_formTitle__3_-M5\",\"formInput\":\"FormControls_formInput__2BV47\",\"formMiniBlock\":\"FormControls_formMiniBlock__2YIh3\",\"formMiniBlockCheckbox\":\"FormControls_formMiniBlockCheckbox__3uvHG\",\"formCheckbox\":\"FormControls_formCheckbox__VxbrM\",\"formButtonLogin\":\"FormControls_formButtonLogin__2Z-E2\",\"captchaImg\":\"FormControls_captchaImg__r4E-Y\",\"captchaInput\":\"FormControls_captchaInput__2gvhJ\",\"formLogin\":\"FormControls_formLogin__KL1id\",\"LoginWrapperGlobal\":\"FormControls_LoginWrapperGlobal__M4yOr\",\"LoginH1\":\"FormControls_LoginH1__3uBaE\",\"testAccountWrapper\":\"FormControls_testAccountWrapper__38leW\",\"testAccountTitle\":\"FormControls_testAccountTitle__3B183\",\"testAccountDescr\":\"FormControls_testAccountDescr__2rhWd\",\"testAccountMiniBlock\":\"FormControls_testAccountMiniBlock__3ZYX2\",\"testAccountMiniBlockWrap\":\"FormControls_testAccountMiniBlockWrap__1m69t\",\"testAccountAttention\":\"FormControls_testAccountAttention__2wZP8\"};","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n  if (value && value.length > maxLength) {\n    return `Max length is ${maxLength} symbols`;\n  } else {\n    return undefined;    \n  }\n}\n\nexport const required: FieldValidatorType = (value) => {\n  if (value) {\n    return undefined;\n  } else {\n    return \"Field is required\";    \n  }\n}\n\nexport const withoutSpace: FieldValidatorType = (value) => {\n  if (value) {\n    let str = value.replace(/\\s/g, '');\n    if (!str) {\n      return \"You entered only spaces\";\n    } else {\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__vTFkd\",\"dialogsItems\":\"Dialogs_dialogsItems__yi9B3\",\"active\":\"Dialogs_active__2uDiC\",\"dialogsItemsTitle\":\"Dialogs_dialogsItemsTitle__1PedL\",\"messages\":\"Dialogs_messages__2jyag\",\"messagesItem\":\"Dialogs_messagesItem__1WauQ\",\"messagesForm\":\"Dialogs_messagesForm__3gWkF\",\"messagesFormField\":\"Dialogs_messagesFormField__2F9BU\",\"messagesFormButton\":\"Dialogs_messagesFormButton__3o1tv\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\ntype PropsType = {\r\n\tid: number\r\n\tname: string\r\n}\r\n\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n\treturn (\r\n\t\t<div className={s.dialog + \" \" + s.active}>\r\n\t\t\t<NavLink activeClassName={s.active} to={`/dialogs/${props.id}`}>{props.name}</NavLink>\t\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\ntype PropsType = {\r\n  message: string\r\n}\r\n\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n\treturn (\r\n\t\t<div className={s.message}>\r\n\t\t\t{props.message}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\nexport default Message;\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {reduxForm, reset, InjectedFormProps} from 'redux-form';\r\nimport {Textarea, createField} from '../../components/common/FormControls/FormControls';\r\nimport {required, maxLengthCreator, withoutSpace} from '../../utils/validators/validators';\r\nimport { DispatchType } from '../../types/types';\r\n\r\n\r\ntype PropsType = {\r\n  dialogsPage: {\r\n    messagesData: Array<{id: number, message: string}>\r\n\t  dialogsData: Array<{id: number, name: string}>\r\n  }\r\n  sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n  let state = props.dialogsPage;\r\n  let dialogsElements = state.dialogsData.map( d=> <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n  let messagesElements = state.messagesData.map( m => <Message message={m.message} key={m.id}/>);\r\n\r\n  let addNewMessage = (values: AddMessageFormValuesType) => {\r\n    (!!values.newMessageBody) && props.sendMessage(values.newMessageBody);\r\n  }\r\n\r\n  return (\r\n   <div className={s.dialogs}>\r\n   \t<div className={s.dialogsItems}>\r\n      <div className={s.dialogsItemsTitle}>My friends:</div>\r\n      { dialogsElements }\r\n   \t</div>\r\n   \t<div className={s.messages}>\r\n      <div className={s.messagesItem}>{ messagesElements }</div>\r\n   \t\t<AddMessageFormRedux onSubmit={addNewMessage}/>\r\n   \t</div>\r\n   </div>\r\n  );\r\n}\r\n\r\n\r\ntype AddMessageFormValuesType = {\r\n  newMessageBody: string\r\n}\r\ntype AddMessageFormValuesKeysType = Extract<keyof AddMessageFormValuesType, string>\r\nconst maxLengthCreator50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormValuesType>> = ({handleSubmit}) => {\r\n  return (\r\n    <form className={s.messagesForm} onSubmit={handleSubmit}>\r\n      <div>\r\n        {createField<AddMessageFormValuesKeysType>(\"Enter your message\", \"newMessageBody\", [required, maxLengthCreator50, withoutSpace], \r\n        Textarea, \"text\", {individerror: \"onSubmit\", className: s.messagesFormField})}\r\n      </div>\r\n      <div><button className={s.messagesFormButton}>Send</button></div>\r\n   </form>\r\n  )\r\n}\r\n\r\nconst afterSubmit = (result: object, dispatch: DispatchType) =>\r\n  dispatch(reset('DialogAddMessageForm'));\r\n  \r\nconst AddMessageFormRedux = reduxForm<AddMessageFormValuesType>({\r\n  form: 'DialogAddMessageForm',\r\n  onSubmitSuccess: afterSubmit\r\n})(AddMessageForm);\r\n\r\n\r\nexport default Dialogs;\r\n\r\n","import React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport { AppStateType } from '../redux/redux-store';\r\n\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean\r\n}\r\ntype PropsType = MapStatePropsType\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n\t\tisAuth: state.auth.isAuth\r\n  }\r\n}\r\n\r\n\r\nconst withAuthRedirect = (WrappedComponent: React.ComponentType) => {\r\n  class RedirectComponent extends React.Component<PropsType> {\r\n    render() {\r\n      let {isAuth, ...restProps} = this.props;\r\n\t\t  if (!isAuth) return <Redirect to={'/login'} />;\r\n      return  (\r\n        <WrappedComponent {...restProps}/>\r\n\t\t\t);\r\n    }\r\n\t}\r\n  let ConnectedAuthRedirectComponent = connect<MapStatePropsType, {}, {}, AppStateType>(mapStateToPropsForRedirect)(RedirectComponent);\r\n  return ConnectedAuthRedirectComponent;\r\n}\r\n\r\n\r\nexport default withAuthRedirect;\r\n\r\n","import Dialogs from './Dialogs';\r\nimport {dialogsActions} from '../../redux/dialogs-reducer'; \r\nimport {connect} from 'react-redux';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\n\r\ntype MapStatePropsType = {\r\n  dialogsPage: {\r\n    messagesData: Array<{id: number, message: string}>\r\n\t  dialogsData: Array<{id: number, name: string}>\r\n  }\r\n}\r\ntype MapDispatchPropsType = {\r\n  sendMessage: (newMessageBody: string) => void\r\n}\r\ntype OwnPropsType = {}\r\n// type PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    dialogsPage: state.dialogsPage\r\n  }\r\n}\r\nlet mapDispatchToProps: MapDispatchPropsType =  {\r\n  sendMessage: dialogsActions.sendMessageCreator\r\n}\r\n\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n  connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n\r\nexport default DialogsContainer;\r\n\r\n"],"sourceRoot":""}