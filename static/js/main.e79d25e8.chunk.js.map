{"version":3,"sources":["components/Navbar/Navbar.module.css","redux/auth-reducer.ts","components/Header/Header.module.css","serviceWorker.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Navbar/Navbar.tsx","hoc/withSuspense.tsx","App.tsx","index.tsx","components/common/Preloader/Preloader.tsx","utils/object-helpers.ts","redux/users-reducer.ts","components/Users/Users.module.css","api/api.ts","redux/profile-reducer.ts","assets/user.svg","redux/dialogs-reducer.ts","components/common/Preloader/Preloader.module.css","assets/preloader.svg"],"names":["module","exports","initialState","userId","email","login","isAuth","captchaUrl","photos","authReducer","state","action","type","payload","authActions","setAuthUserDataThunk","dispatch","a","authAPI","me","meData","resultCode","ResultStandartCodes","Success","data","id","setKeyThunk","setPhotosMeThunk","password","rememberMe","captcha","loginData","ResultCodeForCaptcha","Captcha","getCaptchaUrlThunk","message","messages","length","stopSubmit","_error","logout","securityAPI","getCaptchaUrl","response","url","myId","photoMe","API_KEY","setKeyApi","Boolean","window","location","hostname","match","initialized","appActions","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","dialogsReducer","usersPage","usersReducer","auth","form","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","Header","props","className","s","header","to","photosMe","headerPreloaderBlock","Preloader","loginBlock","headerImgIconA","src","small","iconImg","alt","loginBlockLine","logoutBlock","headerButton","onClick","mapDispatchToProps","connect","authorizedUserId","useEffect","Navbar","nav","item","activeClassName","active","withSuspense","WrappedComponent","preloader","suspensePreloaderBlock","suspensePreloader","Suspense","fallback","ProfileContainer","React","lazy","DialogsContainer","UsersContainer","LoginPage","SuspendedProfile","SuspendedDialogs","SuspendedUsers","SuspendedLogin","AppContainer","catchAllUnhandleErrors","e","console","log","reason","this","initializeApp","addEventListener","removeEventListener","exact","from","path","render","Component","promise","Promise","all","App","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","loader","updateObjectArray","items","itemId","objPropName","newObjProps","map","u","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","followed","count","isFollowingInProgress","filter","usersActions","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","toggleFollowingProgress","requestUsers","page","usersAPI","getUsers","totalCount","_followUnfollowFlow","apiMethod","actionCreator","follow","unfollow","setInstance","apiKey","baseURL","withCredentials","headers","instance","axios","create","get","res","post","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","posts","likesCount","newPostText","newPost","p","postId","profileActions","setUserProfile","setStatus","savePhotoSuccess","addPostActionCreator","deletePost","setUserProfileThunk","reject","getStatusThunk","updateStatusThunk","savePhotoThunk","saveProfileThunk","getState","messagesData","dialogsData","name","body","newMessageBody","dialogsActions","sendMessageCreator"],"mappings":"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","file":"static/js/main.e79d25e8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1kCje\",\"item\":\"Navbar_item__30etw\",\"active\":\"Navbar_active__Iz_6D\"};","import { InferActionsTypes } from './redux-store';\r\nimport { ResultStandartCodes, ResultCodeForCaptcha } from './../api/api';\r\nimport { ThunkType, PhotosType} from './../types/types';\r\nimport {authAPI, securityAPI, setKeyApi} from '../api/api';\r\nimport {stopSubmit} from 'redux-form';\r\n\r\n\r\nexport let initialState = {\r\n\tuserId: null as number | null,\r\n\temail: null as string | null,\r\n\tlogin: null as string | null,\r\n\tisAuth: false as boolean,\r\n\tcaptchaUrl: null as string | null,\r\n\tphotos: null as PhotosType | null,\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: AuthActionsTypes): typeof initialState => {\r\n\tswitch(action.type) {\r\n\t\tcase 'auth/SET_USER_DATA': {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t...action.payload,\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase 'auth/GET_CAPTCHA_SUCCESS': {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t...action.payload,\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase 'auth/SET_PHOTOS_ME_SUCCESS': {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t...action.payload,\r\n\t\t\t};\r\n\t\t}\r\n\t\tdefault: \r\n\t\t  return state;\r\n\t}\r\n}\r\n\r\n\r\nexport type AuthActionsTypes = InferActionsTypes<typeof authActions>\r\n\r\nexport const authActions = {\r\n\tsetAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean, captchaUrl: string | null, photos: PhotosType | null) => ({\r\n\t type: 'auth/SET_USER_DATA', payload: {userId, email, login, isAuth, captchaUrl, photos}\r\n\t} as const),\r\n\tgetCaptchaUrlSuccess: (captchaUrl: string | null) => ({\r\n\t\ttype: 'auth/GET_CAPTCHA_SUCCESS', payload: {captchaUrl}\r\n\t} as const),\r\n\tsetPhotosMeSuccess: (photos: PhotosType) => ({\r\n\t\ttype: 'auth/SET_PHOTOS_ME_SUCCESS', payload: {photos}\r\n\t} as const),\r\n}\r\n\r\n\r\nexport const setAuthUserDataThunk = (): ThunkType => async (dispatch) =>{\r\n\tlet meData = await authAPI.me();\r\n\tif (meData.resultCode === ResultStandartCodes.Success) {\r\n\t\tlet {id, email, login} = meData.data;\r\n\t\tdispatch(setKeyThunk(email))\r\n\t\tdispatch(authActions.setAuthUserData(id, email, login, true, null, null))\r\n\t\tdispatch(setPhotosMeThunk(id))\r\n\t}\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string = ''): ThunkType => async (dispatch) => {\r\n\tlet loginData = await authAPI.login(email, password, rememberMe, captcha);\r\n\tif (loginData.resultCode === ResultStandartCodes.Success) {\r\n\t\tdispatch(setAuthUserDataThunk());\r\n\t} else {\r\n\t\tif(loginData.resultCode === ResultCodeForCaptcha.Captcha) {\r\n\t\t\tdispatch(getCaptchaUrlThunk());\r\n\t\t}\r\n\t\tlet message = (loginData.messages.length > 0) \r\n\t\t\t? loginData.messages[0]\r\n\t\t\t: \"Some error\";\r\n\t\tlet action = stopSubmit(\"login\", {_error: message});\r\n\t\tdispatch(action);\r\n\t}\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n\tlet response = await authAPI.logout();\r\n\tif (response.resultCode === ResultStandartCodes.Success) {\r\n\t\tdispatch(authActions.setAuthUserData(null, null, null, false, null, null));\r\n\t}\r\n}\r\n\r\nconst getCaptchaUrlThunk = (): ThunkType => async (dispatch) => {\r\n\tconst response = await securityAPI.getCaptchaUrl();\r\n\tconst captchaUrl = response.url;\r\n\tdispatch(authActions.getCaptchaUrlSuccess(captchaUrl));\r\n}\r\n\r\nexport const setPhotosMeThunk = (myId: number): ThunkType => async (dispatch) =>{\r\n\tlet response = await authAPI.photoMe(myId);\r\n\tdispatch(authActions.setPhotosMeSuccess(response.photos));\r\n}\r\n\r\nconst setKeyThunk = (email: string) => async () => {\r\n\tlet API_KEY = null;\r\n\tif (email === \"alb.adm.ru@gmail.com\") {\r\n\t\tAPI_KEY = '2f32f390-ae96-4e22-896c-29147e6b5143';\r\n\t} else if (email === \"siseros589@mailhub.pro\") {\r\n\t\tAPI_KEY = 'f4f61e33-1fba-45aa-93ff-8559cf05e371';\r\n\t}\r\n\tsetKeyApi(API_KEY);\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2591E\",\"headerButton\":\"Header_headerButton__2SlBb\",\"loginBlock\":\"Header_loginBlock__21Qml\",\"loginBlockLine\":\"Header_loginBlockLine__3lZMK\",\"logoutBlock\":\"Header_logoutBlock__2fHrk\",\"headerImgIconA\":\"Header_headerImgIconA__1LZn8\",\"headerPreloaderBlock\":\"Header_headerPreloaderBlock__tz0kN\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { InferActionsTypes } from './redux-store';\r\nimport { ThunkType } from './../types/types';\r\nimport {setAuthUserDataThunk} from './auth-reducer';\r\n\r\n\r\nlet initialState = {\r\n\tinitialized: false as boolean\r\n\t// globalError: null\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: AppActionsTypes): typeof initialState => {\r\n switch(action.type) {\r\n \tcase 'app/INITIALIZED_SUCCESS': {\r\n\t  return {\r\n\t  \t...state,\r\n\t\t\tinitialized: true,\r\n\t  };\r\n\t }\r\n\t default: \r\n\t  return state;\r\n }\r\n}\r\n\r\n\r\nexport type AppActionsTypes = InferActionsTypes<typeof appActions>\r\n\r\nexport const appActions = {\r\n\tinitializedSuccess: () => ({\r\n\t\ttype: 'app/INITIALIZED_SUCCESS'\r\n\t} as const),\r\n}\r\n\r\n\r\nexport const initializeApp = (): ThunkType => async (dispatch) => {\r\n\tlet promise = dispatch(setAuthUserDataThunk());\r\n\tawait Promise.all([promise])\r\n\tdispatch(appActions.initializedSuccess());\r\n}\r\n\r\n","import {createStore, combineReducers,\r\n applyMiddleware, compose} from 'redux';\r\nimport {profileReducer} from './profile-reducer';\r\nimport {dialogsReducer} from './dialogs-reducer';\r\nimport {usersReducer} from './users-reducer';\r\nimport {authReducer} from './auth-reducer';\r\nimport {appReducer} from './app-reducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {reducer as formReducer} from 'redux-form';\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n\tprofilePage: profileReducer,\r\n\tdialogsPage: dialogsReducer,\r\n\tusersPage: usersReducer,\r\n\tauth: authReducer,\r\n\tform: formReducer,\r\n\tapp: appReducer\r\n});\r\n\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType> // специальная функция, которая определяет тип того, что возвращается из (в данном случае из функции)\r\n\r\n\r\nexport type InferActionsTypes<T> = T extends { [key: string]: (...args: any[]) => infer U} ? U : never // infer выводит переменную (запоминает ее), для дальнейшего использования\r\n\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n// ts-ignore - игнорирует правила ts следующей строчки\r\n\r\nexport default store;\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport iconImg from '../../assets/user.svg';\r\nimport { PhotosType } from '../../types/types';\r\n\r\n\r\ntype PropsType = {\r\n  isAuth: boolean\r\n  login: string | null\r\n  photosMe: PhotosType | null\r\n  logout: () => void\r\n}\r\n\r\n\r\nconst Header: React.FC<PropsType> = (props) => {  \r\n  return (\r\n    <header className={s.header}>\r\n      {(!props.isAuth) && <Redirect to={'/login'} />}\r\n\r\n      {props.isAuth \r\n        ? ( (!props.photosMe && <div className={s.headerPreloaderBlock}><Preloader /></div>) \r\n            || (props.photosMe && <div className={s.loginBlock}>\r\n                  <NavLink className={s.headerImgIconA} to={\"/profile\"}> \r\n                    <img src={props.photosMe.small || iconImg} alt=\"header-img\"/> \r\n                  </NavLink> \r\n                  <div className={s.loginBlockLine}> - </div> \r\n                  <NavLink to={\"/profile\"}>{props.login}</NavLink>\r\n                </div>)\r\n          ) \r\n        : <div></div>\r\n      }     \r\n\r\n      <div className={s.logoutBlock}>\r\n      { props.isAuth \r\n        ? <div>\r\n            <button className={s.headerButton} onClick={() => {props.logout()}}>Logout</button>\r\n          </div>\r\n        : <NavLink to={'/login'}>Login</NavLink>\r\n      }\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\n\r\nexport default Header;\r\n\r\n","import React, {useEffect} from 'react';\r\nimport Header from './Header';\r\nimport {connect} from 'react-redux';\r\nimport {logout, setPhotosMeThunk} from '../../redux/auth-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { PhotosType } from '../../types/types';\r\n\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean\r\n  login: string | null\r\n  authorizedUserId: number | null\r\n  photosMe: PhotosType | null\r\n}\r\ntype MapDispatchPropsType = {\r\n  logout: () => void\r\n  setPhotosMeThunk: (myId: number) => void\r\n}\r\ntype OwnPropsType = {}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\n\r\nconst HeaderContainer: React.FC<PropsType> = (props) => {\r\n  let setPhotosMeThunk = props.setPhotosMeThunk;\r\n\r\n  useEffect(() => {\r\n    if(!props.photosMe) {\r\n      props.authorizedUserId && setPhotosMeThunk(props.authorizedUserId);\r\n    }\r\n  }, [props.photosMe, props.authorizedUserId, setPhotosMeThunk]);\r\n\r\n  return (\r\n    <Header {...props}/>\r\n  );\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n    authorizedUserId: state.auth.userId,\r\n    photosMe: state.auth.photos\r\n  }\r\n}\r\nlet mapDispatchToProps: MapDispatchPropsType = {\r\n logout,\r\n setPhotosMeThunk\r\n}\r\n\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps)(HeaderContainer);\r\n\r\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\nconst Navbar = () => {\r\n  return (\r\n   <nav className={s.nav}>\r\n     <ul>\r\n      <li className={`${s.item}`}><NavLink activeClassName={s.active} to=\"/profile\">Profile</NavLink></li>\r\n      <li className={s.item}><NavLink activeClassName={s.active} to=\"/dialogs\">Messages</NavLink></li>\r\n      <li className={s.item}><NavLink activeClassName={s.active} to=\"/users\">Users</NavLink></li>\r\n      <li className={s.item}><NavLink activeClassName={s.active} to=\"/news\">News</NavLink></li>\r\n      <li className={s.item}><NavLink activeClassName={s.active} to=\"/music\">Music</NavLink></li>\r\n      <li className={s.item}><NavLink activeClassName={s.active} to=\"/settings\">Settings</NavLink></li>\r\n     </ul>\r\n   </nav>\r\n  );\r\n}\r\n\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport Preloader from '../components/common/Preloader/Preloader';\r\nimport s from '../components/Users/Users.module.css';\r\n\r\n\r\nconst withSuspense = (WrappedComponent: React.ComponentType): React.FC => (props) =>{\r\n  let preloader = <div className={s.suspensePreloaderBlock}>\r\n                    <div className={s.suspensePreloader}>\r\n                      <Preloader />\r\n                    </div>\r\n                  </div>;\r\n  return (\r\n    <React.Suspense fallback={preloader}>\r\n      <WrappedComponent {...props} />      \r\n    </React.Suspense>\r\n  );\r\n}\r\n\r\n\r\nexport default withSuspense;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport Nav from './components/Navbar/Navbar';\nimport {Route, Switch} from 'react-router-dom';\nimport {initializeApp} from './redux/app-reducer'; \nimport {connect} from 'react-redux';\nimport {compose} from 'redux';\nimport {Redirect} from 'react-router-dom';\nimport withSuspense from './hoc/withSuspense';\nimport Preloader from './components/common/Preloader/Preloader';\nimport { AppStateType } from './redux/redux-store';\n\n\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\nconst LoginPage = React.lazy(() => import('./components/Login/Login'));\n\nconst SuspendedProfile = withSuspense(ProfileContainer)\nconst SuspendedDialogs = withSuspense(DialogsContainer)\nconst SuspendedUsers = withSuspense(UsersContainer)\nconst SuspendedLogin = withSuspense(LoginPage)\n\n\ntype MapStatePropsType = {\n  initialized: boolean\n}\ntype MapDispatchPropsType = {\n  initializeApp: () => void\n}\ntype OwnPropsType = {}\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\n\n\nclass AppContainer extends React.Component<PropsType> {\n  catchAllUnhandleErrors = (e: PromiseRejectionEvent) => {\n    console.log(\"Error! Reason: \" + e.reason.message)\n  }\n\n  componentDidMount() {\n    this.props.initializeApp();\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandleErrors);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandleErrors);\n  }\n\n  render(){\n    if(!this.props.initialized) {\n      return (\n        <div className={\"appPreloaderBlock\"}>\n          <div className={\"appPreloader\"}>\n            <Preloader />\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className='appMainWrapperContent'>\n\n        <div className={\"appTextMobileBlockWrap\"}>\n          <div className={\"appTextMobileBlock\"}>\n              <div className={\"appTextMobile\"}>Hello, this site is not available for viewing on tablet or mobile devices. <div>If you want to still see this site, access it through your computer! <span>:)</span></div> </div>\n          </div>\n        </div>\n\n        <div className={\"app-wrapper\"}><HeaderContainer />\n          <Nav />\n          <div className=\"app-wrapper-content\">\n            <Switch>\n              <Redirect exact from=\"/\" to=\"/profile\" />\n              <Route path=\"/profile/:userId?\" render={() => <SuspendedProfile />}/>\n              <Route path=\"/dialogs\" render={() => <SuspendedDialogs />}/>  \n              <Route path=\"/users\" render={() => <SuspendedUsers />}/> \n              <Route path=\"/login\" render={() => <SuspendedLogin />}/> \n              <Route path=\"*\" render={() =>(<div className={\"error404\"}>404: NOT FOUND</div>)}/> \n            </Switch>\n          </div>\n        </div>  \n\n      </div>\n    );\n  }\n}\n\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\n  return {\n    initialized: state.app.initialized\n  }\n}\nlet mapDispatchToProps: MapDispatchPropsType = {\n  initializeApp\n}\n\n\nconst App = compose<React.ComponentType>(\n  connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps)\n)(AppContainer)\n\nexport default App;\n","import * as serviceWorker from './serviceWorker';\nimport store from './redux/redux-store';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {HashRouter} from 'react-router-dom';\n\n\nReactDOM.render(\n\t<HashRouter>\n\t\t<Provider store={store}>\n\t\t  <App/>\n\t\t</Provider>\n\t</HashRouter>, document.getElementById('root')\n); // используем в данном случае (пока так) HashRouter для правильной работы URL в браузере на хостинге, вместо BrowserRouter: (<BrowserRouter basename=\"/appReact\">)\n\n\n\n\n\n\n// делаем свою перерисовку, как в redux (на подобии)\n/* let rerenderEntireTree = (state) => {\n\tReactDOM.render(\n\t\t<BrowserRouter>\n\t\t\t<Provider store={store}>\n\t\t\t <App store={store} dispatch={store.dispatch.bind(store)}/>\n\t\t\t</Provider>\n\t\t</BrowserRouter>, document.getElementById('root')\n\t);\n}\n\nrerenderEntireTree(store.getState());\nstore.subscribe(() => {\n let state = store.getState();\n\trerenderEntireTree(state);\n}); */\n\n\n/*  \n Это мы написали свой provider, сейчас используем из библиотеки react-redux\n\n import React from 'react';\n const StoreContext = React.createContext(null);\n\n export const Provider = (props) => {\n \treturn (\n \t\t<StoreContext.Provider value={props.store}>\n \t\t\t{\n \t\t\t props.children\n \t\t\t}\n \t\t</StoreContext.Provider>\t\n \t);\n }\n\n export default StoreContext;\n*/\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n\n","import React from 'react';\r\nimport s from './Preloader.module.css';\r\nimport preloader from '../../../assets/preloader.svg';\r\n\r\n\r\ntype PropsType = {}\r\n\r\n\r\nlet Preloader: React.FC<PropsType> = (props) => {\r\n\treturn (\r\n    <div className={s.loader}>\r\n      <img src={preloader} alt=\"preloader\"/>\r\n    </div>\r\n\t);\r\n}\r\n\r\n\r\nexport default Preloader;\r\n\r\n","import { UserType } from './../types/types';\r\n\r\nexport const updateObjectArray = (items: Array<UserType>, itemId: number, objPropName: string, newObjProps: object) => {\r\n  return items.map((u: UserType) => {\r\n    if(u[objPropName as keyof UserType] === itemId) {\r\n      return {...u, ...newObjProps};\r\n    } else {\r\n      return u;\r\n    }\r\n  });\r\n}\r\n\r\n","import { InferActionsTypes } from './redux-store';\r\nimport { ResultStandartCodes } from './../api/api';\r\nimport { ThunkType, DispatchType } from './../types/types';\r\nimport {usersAPI} from '../api/api';\r\nimport {updateObjectArray} from '../utils/object-helpers';\r\nimport {UserType} from '../types/types';\r\n\r\n\r\nlet initialState = {\r\n\tusers: [] as Array<UserType> | [],\r\n\tpageSize: 5 as number,\r\n\ttotalUsersCount: 0 as number,\r\n\tcurrentPage: 1 as number,\r\n\tisFetching: true as boolean,\r\n  followingInProgress: [] as Array<number> | [],\r\n}\r\n\r\nexport const usersReducer = (state = initialState, action: UsersActionsTypes): typeof initialState => {\r\n switch(action.type) {\r\n \tcase 'users/FOLLOW': {\r\n\t\treturn {\r\n\t\t\t...state,\r\n\t\t\tusers: updateObjectArray(state.users, action.userId, \"id\", {followed: true}),\r\n\t\t};\r\n\t }\r\n\t case 'users/UNFOLLOW': {\r\n\t  return {\r\n\t\t\t...state,\r\n\t\t\tusers: updateObjectArray(state.users, action.userId, \"id\", {followed: false})\r\n\t\t}\r\n\t }\r\n\t case 'users/SET_USERS': {\r\n\t  return {\r\n\t  \t...state,\r\n\t  \tusers: action.users\r\n\t  };\r\n\t }\r\n\t case 'users/SET_CURRENT_PAGE': {\r\n\t  return {\r\n\t  \t...state,\r\n\t  \tcurrentPage: action.currentPage\r\n\t  };\r\n\t }\r\n\t case 'users/SET_TOTAL_USERS_COUNT': {\r\n\t  return {\r\n\t  \t...state,\r\n\t  \ttotalUsersCount: action.count\r\n\t  };\r\n\t }\r\n\t case 'users/TOGGLE_IS_FETCHING': {\r\n\t  return {\r\n\t  \t...state,\r\n\t  \tisFetching: action.isFetching\r\n\t  };\r\n\t }\r\n\t case 'users/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n\t  return {\r\n\t  \t...state,\r\n\t\t\tfollowingInProgress: action.isFollowingInProgress \r\n\t\t\t? [...state.followingInProgress, action.userId] \r\n\t\t\t: [...state.followingInProgress.filter((id: number) => id !== action.userId)]\r\n\t  };\r\n\t }\r\n\t default: \r\n\t  return state;\r\n }\r\n}\r\n\r\n\r\nexport type UsersActionsTypes = InferActionsTypes<typeof usersActions>\r\n\r\nexport const usersActions = {\r\n\tfollowSuccess: (userId: number) => ({\r\n\t\ttype: 'users/FOLLOW', userId \r\n\t} as const),\r\n\tunfollowSuccess: (userId: number) => ({ \r\n\t\ttype: 'users/UNFOLLOW', userId\r\n\t} as const),\r\n\tsetUsers: (users: Array<UserType>) => ({ \r\n\t\ttype: 'users/SET_USERS', users\r\n\t} as const),\r\n\tsetCurrentPage: (currentPage: number) => ({ \r\n\t\ttype: 'users/SET_CURRENT_PAGE', currentPage\r\n\t} as const),\r\n\tsetTotalUsersCount: (totalUsersCount: number) => ({\r\n\t\ttype: 'users/SET_TOTAL_USERS_COUNT', count: totalUsersCount\r\n\t} as const),\r\n\ttoggleIsFetching: (isFetching: boolean) => ({ \r\n\t\ttype: 'users/TOGGLE_IS_FETCHING', isFetching\r\n\t} as const),\r\n\ttoggleFollowingProgress: (isFollowingInProgress: boolean, userId: number) => ({ \r\n\t\ttype: 'users/TOGGLE_IS_FOLLOWING_PROGRESS', isFollowingInProgress, userId\r\n\t} as const),\r\n}\r\n\r\n\r\nexport const requestUsers = (page: number, pageSize: number): ThunkType => async (dispatch) => {\r\n\tdispatch(usersActions.toggleIsFetching(true));\r\n\tdispatch(usersActions.setCurrentPage(page));\r\n\tlet data = await usersAPI.getUsers(page, pageSize);\r\n\tdispatch(usersActions.setUsers(data.items));\r\n\tdispatch(usersActions.setTotalUsersCount(data.totalCount));\r\n\tdispatch(usersActions.toggleIsFetching(false));\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: Function, actionCreator: (userId: number) => UsersActionsTypes) => {\r\n\tdispatch(usersActions.toggleFollowingProgress(true, userId));\r\n\tlet response = await apiMethod(userId);\r\n\tif(response.resultCode === ResultStandartCodes.Success) {\r\n\t\tdispatch(actionCreator(userId));\r\n\t\tdispatch(usersActions.toggleFollowingProgress(false, userId));\r\n\t}\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n\t_followUnfollowFlow(dispatch, userId, \r\n\t\tusersAPI.follow, usersActions.followSuccess);\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n\t_followUnfollowFlow(dispatch, userId, \r\n\t\tusersAPI.unfollow, usersActions.unfollowSuccess);\t\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"Users_userPhoto__2uK85\",\"User\":\"Users_User__dUQa0\",\"UserImg\":\"Users_UserImg__qybXb\",\"UserInfo\":\"Users_UserInfo__4XFcy\",\"UserName\":\"Users_UserName__3dnxM\",\"UserStatus\":\"Users_UserStatus__GQiVF\",\"UserFollow\":\"Users_UserFollow__3ZwaE\",\"UserFollowUnfol\":\"Users_UserFollowUnfol__37z_j\",\"UserFollowFol\":\"Users_UserFollowFol__MAeLW\",\"usersPreloader\":\"Users_usersPreloader__2_YUI\",\"usersPreloaderBlock\":\"Users_usersPreloaderBlock__Ly-nY\",\"usersWrapper\":\"Users_usersWrapper__3e7c2\",\"suspensePreloaderBlock\":\"Users_suspensePreloaderBlock__2niDh\",\"suspensePreloader\":\"Users_suspensePreloader__Bmf8p\"};","import { ProfileType, PhotosType, UserType } from './../types/types';\r\nimport axios from 'axios';\r\n\r\n\r\nconst setInstance = (apiKey: string | null = null) => {\r\n  return {\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n      'API-KEY': `${apiKey}`\r\n    }\r\n  }\r\n}\r\nlet instance = axios.create(\r\n  setInstance()\r\n);\r\nexport const setKeyApi = (apiKey: string | null) => {\r\n  return instance = axios.create(\r\n    setInstance(apiKey)\r\n  );\r\n}\r\n\r\n\r\nexport enum ResultStandartCodes { // делаем enum, чтобы не вспоминать, что ознает то или иное число.\r\n  Success = 0,\r\n  Error = 1,\r\n}\r\nexport enum ResultCodeForCaptcha {\r\n  Captcha = 10,\r\n}\r\n\r\n\r\n\r\ntype UsersApiTypes = {\r\n  getUsers: {\r\n\t\titems: Array<UserType>\r\n\t\ttotalCount: number\r\n  },\r\n  follow: {\r\n    resultCode: ResultStandartCodes\r\n\t\tmessages: string[]\r\n  },\r\n  unfollow: {\r\n    resultCode: ResultStandartCodes\r\n\t\tmessages: string[]\r\n  }\r\n}\r\nexport const usersAPI = {\r\n  async getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n    return instance.get<UsersApiTypes[\"getUsers\"]>(`users?page=${currentPage}&count=${pageSize}`).then(res => res.data)\r\n  },\r\n  async follow(userId: number) {\r\n    return instance.post<UsersApiTypes[\"follow\"]>(`follow/${userId}`).then(res => res.data)\r\n  },\r\n  async unfollow(userId: number) {\r\n    return instance.delete<UsersApiTypes[\"unfollow\"]>(`follow/${userId}`).then(res => res.data)\r\n  }\r\n}\r\n\r\n\r\n\r\ntype AuthApiTypes = {\r\n  me: {\r\n    data: {\r\n      id: number\r\n      email: string\r\n      login: string\r\n    }\r\n    resultCode: ResultStandartCodes\r\n    messages: string[]\r\n  },\r\n  login: {\r\n    data: {\r\n      userId: number\r\n    }\r\n    resultCode: ResultStandartCodes | ResultCodeForCaptcha\r\n    messages: string[]\r\n  },\r\n  photoMe: {\r\n\t\tphotos: {\r\n\t\t\tlarge: string\r\n\t\t\tsmall: string\r\n\t\t}\r\n  },\r\n  logout: {\r\n    resultCode: ResultStandartCodes\r\n    messages: string[]\r\n  }\r\n}\r\nexport const authAPI = {\r\n  async me() {\r\n    return instance.get<AuthApiTypes[\"me\"]>(`auth/me`).then(res => res.data)\r\n  },\r\n  async photoMe(myId: number) {\r\n    return instance.get<AuthApiTypes[\"photoMe\"]>(`/profile/${myId}`).then(res => res.data)\r\n  },\r\n  async login(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) {\r\n    return instance.post<AuthApiTypes[\"login\"]>(`auth/login`, {\r\n      email, password, rememberMe, captcha\r\n    }).then(res => res.data)\r\n  },\r\n  async logout() {\r\n    return instance.delete<AuthApiTypes[\"logout\"]>(`auth/login`).then(res => res.data)\r\n  },\r\n}\r\n\r\n\r\n\r\ntype ProfileApiTypes = {\r\n  getProfile: ProfileType,\r\n  getStatus: string,\r\n  updateStatus: {\r\n    resultCode: ResultStandartCodes\r\n\t\tmessages: string[]\r\n\t},\r\n\tsavePhoto: {\r\n\t\tresultCode: ResultStandartCodes\r\n\t\tdata: {\r\n      photos: PhotosType\r\n    }\r\n\t}\r\n\tsaveProfile: {\r\n\t\tresultCode: ResultStandartCodes\r\n\t\tmessages: string[]\r\n\t}\r\n}\r\nexport const profileAPI  = {\r\n  async getProfile(userId: number) {\r\n    return instance.get<ProfileApiTypes[\"getProfile\"]>(`profile/${userId}`).then(res => res.data)\r\n  },\r\n  async getStatus(userId: number) {\r\n    return instance.get<ProfileApiTypes[\"getStatus\"]>(`profile/status/${userId}`).then(res => res.data)  \r\n  },\r\n  async updateStatus(status: string) {\r\n    return instance.put<ProfileApiTypes[\"updateStatus\"]>(`profile/status/`, {status: status}).then(res => res.data)\r\n  },\r\n  async savePhoto(photoFile: File) {\r\n    const formData = new FormData();\r\n    formData.append(\"image\", photoFile);\r\n    return instance.put<ProfileApiTypes[\"savePhoto\"]>(`profile/photo/`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data'\r\n      }\r\n    }).then(res => res.data)   \r\n  },\r\n  async saveProfile(profile: ProfileType) {\r\n    return instance.put<ProfileApiTypes[\"saveProfile\"]>(`profile/`, profile).then(res => res.data)\r\n  }\r\n}\r\n\r\n\r\n\r\ntype SecurityApiTypes = {\r\n  getCaptchaUrl: {\r\n\t\turl: string | null\r\n  }\r\n}\r\nexport const securityAPI = {\r\n  async getCaptchaUrl() {\r\n    return instance.get<SecurityApiTypes[\"getCaptchaUrl\"]>(`security/get-captcha-url`).then(res => res.data)\r\n  }\r\n}\r\n\r\n","import { InferActionsTypes } from './redux-store';\r\nimport { ResultStandartCodes } from './../api/api';\r\nimport { ThunkType } from './../types/types';\r\nimport {profileAPI} from '../api/api';\r\nimport {stopSubmit} from 'redux-form';\r\nimport {usersActions} from './users-reducer'; // загружает весь бандл, или только одну штуку (здесь используем лишь одну)?\r\nimport {setPhotosMeThunk} from './auth-reducer';\r\nimport {PostType, ProfileType, PhotosType} from '../types/types';\r\n\r\n\r\nlet initialState = {\r\n\tposts: [\r\n\t\t{id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n\t\t{id: 2, message: 'It is my first post', likesCount: 22},\r\n\t\t{id: 3, message: 'Good', likesCount: 14},\r\n\t\t{id: 4, message: 'BB', likesCount: 16}\r\n\t] as Array<PostType>,\r\n\tprofile: null as ProfileType | null,\r\n\tstatus: \"\" as string,\r\n\tnewPostText: null as string | null,\r\n}\t\t  \r\n\t\t\t\r\nexport const profileReducer = (state = initialState, action: ProfileActionsTypes): typeof initialState => {\r\n switch(action.type) {\r\n \tcase 'profile/ADD_POST': {\r\n\t  let newPost = {\r\n\t   id: state.posts.length + 1,\r\n\t   message: action.newPostText,\r\n\t   likesCount: 0\r\n\t  }\r\n\t  return {\r\n\t  \t...state,\r\n\t  \tposts: [...state.posts, newPost],\r\n\t  \tnewPostText: ''\r\n\t  };\r\n\t }\r\n\t case 'profile/SET_USER_PROFILE': {\r\n\t  return {\r\n\t  \t...state,\r\n\t  \tprofile: action.profile\r\n\t  }; \r\n\t }\r\n\t case 'profile/SET_STATUS': {\r\n\t  return {\r\n\t  \t...state,\r\n\t  \tstatus: action.status\r\n\t  }; \r\n\t }\r\n\t case 'profile/DELETE_POST': {\r\n\t  return {\r\n\t  \t...state,\r\n\t  \tposts: state.posts.filter((p: PostType) => p.id !== action.postId)\r\n\t  }; \r\n\t }\r\n\t case 'profile/SAVE_PHOTO_SUCCESS': {\r\n\t  return {\r\n\t\t\t...state,\r\n\t\t\tprofile: {...state.profile, photos: action.photos} as ProfileType\r\n\t  }; \r\n\t }\r\n\t default: \r\n\t  return state;\r\n }\r\n}\r\n\r\n\r\nexport type ProfileActionsTypes = InferActionsTypes<typeof profileActions>\r\n\r\nexport const profileActions = {\r\n\tsetUserProfile: (profile: ProfileType) => ({ \r\n\t\ttype: 'profile/SET_USER_PROFILE', profile \r\n\t} as const),\r\n\tsetStatus: (status: string) => ({ \r\n\t\ttype: 'profile/SET_STATUS', status \r\n\t} as const),\r\n\tsavePhotoSuccess: (photos: PhotosType) => ({ \r\n\t\ttype: 'profile/SAVE_PHOTO_SUCCESS', photos \r\n\t} as const),\r\n\taddPostActionCreator: (newPostText: string) => ({\r\n\t\ttype: 'profile/ADD_POST', newPostText\r\n\t} as const),\r\n\tdeletePost: (postId: number) => ({ // используется для теста в PR\t\r\n\t\ttype: 'profile/DELETE_POST', postId \r\n\t} as const),\r\n}\r\n\r\n\r\nexport const setUserProfileThunk = (userId: number): ThunkType => async (dispatch) => {\r\n\tdispatch(usersActions.toggleIsFetching(true));\r\n\ttry {\r\n\t\tlet profile = await profileAPI.getProfile(userId)\r\n\t\tdispatch(profileActions.setUserProfile(profile));\r\n\t\tdispatch(usersActions.toggleIsFetching(false));\r\n\t} catch (error) {\r\n\t\tdispatch(usersActions.toggleIsFetching(false));\r\n\t\treturn Promise.reject(error);\r\n\t}\t\r\n}\r\n\r\nexport const getStatusThunk = (userId: number): ThunkType => async (dispatch) => {\r\n\ttry {\r\n\t\tlet status = await profileAPI.getStatus(userId);\r\n\t\tstatus && dispatch(profileActions.setStatus(status));\r\n\t} catch (error) {\r\n\t\treturn Promise.reject(error);\r\n\t}\r\n}\r\n\r\nexport const updateStatusThunk = (status: string): ThunkType => async (dispatch) => {\r\n\ttry {\r\n\t\tlet response = await profileAPI.updateStatus(status);\r\n\t\tif(response.resultCode === ResultStandartCodes.Success) {\r\n\t\t\tdispatch(profileActions.setStatus(status));\r\n\t\t} else {\r\n\t\t\treturn Promise.reject(response.messages[0]);\r\n\t\t}\r\n\t} catch (error) {\r\n\t\treturn Promise.reject(error);\r\n\t}\r\n}\r\n\r\nexport const savePhotoThunk = (photoFile: File, myId: number): ThunkType => async (dispatch) => {\r\n\tlet response = await profileAPI.savePhoto(photoFile);\r\n\tif(response.resultCode === ResultStandartCodes.Success) {\r\n\t\tdispatch(profileActions.savePhotoSuccess(response.data.photos));\r\n\t\tdispatch(setPhotosMeThunk(myId));\r\n\t}\r\n}\r\n\r\nexport const saveProfileThunk = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n\tconst userId = getState().auth.userId;\r\n\tlet response = await profileAPI.saveProfile(profile);\r\n\tif(response.resultCode === ResultStandartCodes.Success) {\r\n\t\tuserId && dispatch(setUserProfileThunk(userId));\r\n\t} else {\r\n\t\t// let action = stopSubmit(\"edit-profile\", {\"contacts\": {\"facebook\": response.data.messages[0]}}); // выводит ошибку у конкретного поля\r\n\t\tlet action = stopSubmit(\"edit-profile\", {_error: \"Error! Please check the entered data!\"});\r\n\t\tdispatch(action);\r\n\t\treturn Promise.reject(response.messages[0]);\r\n\t}\r\n}\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/user.316d47a9.svg\";","import { InferActionsTypes } from './redux-store';\r\n\r\n\r\ninterface initialStateType {\r\n\tmessagesData: Array<{id: number, message: string}>,\r\n\tdialogsData: Array<{id: number, name: string}>\r\n}\r\nlet initialState: initialStateType = {\r\n\tmessagesData: [\r\n\t {id: 1, message: 'Hi'},\r\n\t {id: 2, message: 'How are you doing?'}, \r\n\t {id: 3, message: 'GG'}, \r\n\t {id: 4, message: 'GG'}, \r\n\t {id: 5, message: 'GG'}, \r\n\t {id: 6, message: 'GG'}\r\n\t],\r\n\tdialogsData: [\r\n\t {id: 1, name: 'Dimych'},\r\n\t {id: 2, name: 'Andrey'}, \r\n\t {id: 3, name: 'Sveta'}, \r\n\t {id: 4, name: 'Sasha'}, \r\n\t {id: 5, name: 'Valera'},\r\n\t {id: 6, name: 'Albert'}\r\n\t]\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action: DialogsActionsTypes): initialStateType => {\r\n switch(action.type) {\r\n\t case 'dialogs/SEND_MESSAGE': \r\n\t\tlet body = action.newMessageBody;\r\n\t  return {\r\n\t  \t...state,\r\n\t\t\tmessagesData: [...state.messagesData, {id: state.messagesData.length + 1, message: body}], // это новый синтаксис пуша эдемента в массив (push)\r\n\t  };\r\n\t default: \r\n\t  return state;\r\n }\r\n}\r\n\r\n\r\nexport type DialogsActionsTypes = InferActionsTypes<typeof dialogsActions>\r\n\r\nexport const dialogsActions = {\r\n\tsendMessageCreator: (newMessageBody: string) => ({\r\n\t\ttype: 'dialogs/SEND_MESSAGE', newMessageBody, payload: {captchaUrl: 5}\r\n\t} as const),\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__29Yw2\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.eb09f74a.svg\";"],"sourceRoot":""}