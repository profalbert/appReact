{"version":3,"sources":["components/common/FormControls/FormControls.tsx","components/common/FormControls/FormControls.module.css","utils/validators/validators.ts","components/Login/Login.tsx"],"names":["FormControl","meta","individerror","children","hasError","error","submitFailed","touched","className","s","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","type","validate","module","exports","maxLengthCreator","maxLength","value","length","required","withoutSpace","replace","maxLengthCreator50","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","formLogin","onSubmit","formMiniBlock","formTitle","formInput","formMiniBlockCheckbox","formCheckbox","captchaWrap","captchaDescr","captchaImg","src","alt","captchaInput","formSummaryErrorLoginBlock","formSummaryError","formButtonLogin","mapDispatchToProps","login","connect","state","isAuth","auth","authorizedUserId","userId","to","LoginH1","LoginWrapperGlobal","formData","email","password","rememberMe","captcha","testAccountWrapper","testAccountTitle","testAccountDescr","testAccountMiniBlockWrap","testAccountMiniBlock","testAccountAttention"],"mappings":"sRAWaA,EAA8C,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,SAC3EC,EAAW,KAMf,OAJEA,EADmB,aAAjBF,EACSD,EAAKI,OAASJ,EAAKK,aAEnBL,EAAKI,OAASJ,EAAKM,QAG9B,yBAAKC,UAAWC,IAAEC,YAAc,KAAON,EAAWK,IAAEJ,MAAQ,KAC1D,6BACGF,GAEFC,GAAY,8BAAOH,EAAKI,SAalBM,EAAgE,SAACC,GAAW,IAChFC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBX,KADwE,YAClDW,EADkD,mBAEtF,OACE,kBAACZ,EAAgBY,EACf,8CAAcC,EAAWC,MAMlBC,EAA6D,SAACH,GAAW,IAC7EC,EAAwCD,EAAxCC,MAA2BC,GAAaF,EAAjCX,KAAiCW,EAA3BJ,UAD+D,YACpCI,EADoC,+BAEnF,OACE,kBAACZ,EAAgBY,EACf,2CAAWC,EAAWC,MAQfE,EAAc,SAA+BC,EAAqBC,EAC7EC,EAAuCC,EACvCC,GAA8B,IAAhBT,EAAe,uDAAP,GAEtB,OACE,6BACE,kBAAC,IAAD,eAAOU,SAAUH,EACZD,KAAMA,EAAMG,KAAMA,EAClBD,UAAWA,EAAWH,YAAaA,GAC/BL,O,oBClEfW,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,iBAAmB,uCAAuC,qBAAuB,2CAA2C,2BAA6B,iDAAiD,UAAY,gCAAgC,UAAY,gCAAgC,cAAgB,oCAAoC,sBAAwB,4CAA4C,aAAe,mCAAmC,gBAAkB,sCAAsC,WAAa,iCAAiC,aAAe,mCAAmC,UAAY,gCAAgC,mBAAqB,yCAAyC,QAAU,8BAA8B,mBAAqB,yCAAyC,iBAAmB,uCAAuC,iBAAmB,uCAAuC,qBAAuB,2CAA2C,yBAA2B,+CAA+C,qBAAuB,6C,iCCCjrC,sGAAO,IAAMC,EAAmB,SAACC,GAAD,OAA2C,SAACC,GAC1E,OAAIA,GAASA,EAAMC,OAASF,EACpB,iBAAN,OAAwBA,EAAxB,iBAEA,IAISG,EAA+B,SAACF,GAC3C,OAAIA,OACF,EAEO,qBAIEG,EAAmC,SAACH,GAC/C,OAAIA,EACQA,EAAMI,QAAQ,MAAO,SAI7B,EAFO,+BAKT,I,iCC3BJ,+FAsBMC,EAAqBP,YAAiB,IAqCtCQ,EAAiBC,YAAkD,CACvEC,KAAM,SADeD,EAnCoF,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAc/B,EAAuB,EAAvBA,MAAOgC,EAAgB,EAAhBA,WAChI,OACE,0BAAM7B,UAAWC,IAAE6B,UAAWC,SAAUH,GACtC,yBAAK5B,UAAWC,IAAE+B,eAChB,yBAAKhC,UAAWC,IAAEgC,WAAlB,UACA,yBAAKjC,UAAWC,IAAEiC,WAAY1B,YAAqC,QAAS,QAAS,CAACa,IAAUG,EAAoBF,KAAef,IAAO,OAAQ,MAEpJ,yBAAKP,UAAWC,IAAE+B,eAChB,yBAAKhC,UAAWC,IAAEgC,WAAlB,aACA,yBAAKjC,UAAWC,IAAEiC,WAAY1B,YAAqC,WAAY,WAAY,CAACa,IAAUG,EAAoBF,KAAef,IAAO,WAAY,MAE9J,yBAAKP,UAAWC,IAAEkC,uBAChB,yBAAKnC,UAAWC,IAAEgC,WAAlB,gBACA,yBAAKjC,UAAWC,IAAEmC,cACf5B,YAAqC,GAAI,aAAc,GAAID,IAAO,WAAY,MAIlFsB,GAAc,yBAAK7B,UAAWC,IAAEoC,YAAc,IAAMpC,IAAE+B,eACrD,yBAAMhC,UAAWC,IAAEqC,cAAnB,wCACA,yBAAMtC,UAAWC,IAAEsC,WAAa,IAAMtC,IAAEiC,WAAW,yBAAKM,IAAKX,EAAYY,IAAI,aAC7E,yBAAMzC,UAAWC,IAAEyC,aAAe,IAAMzC,IAAEiC,WAAY1B,YAAqC,qBAAsB,UAAW,CAACa,IAAUC,KAAef,IAAO,OAAQ,MAGtKV,GACE,yBAAKG,UAAWC,IAAE0C,4BAChB,yBAAK3C,UAAWC,IAAE2C,kBAAmB/C,IAI1C,6BAAK,4BAAQG,UAAWC,IAAE4C,iBAArB,cAqEPC,EAA2C,CAC7CC,WAIaC,uBAZO,SAACC,GACrB,MAAO,CACLC,OAAQD,EAAME,KAAKD,OACnBrB,WAAYoB,EAAME,KAAKtB,WACvBuB,iBAAkBH,EAAME,KAAKE,UAQ4EP,EAA9FE,EAlDoB,SAAC5C,GAClC,IAAIyB,EAAazB,EAAMyB,WAMvB,OAAIzB,EAAM8C,OACD,kBAAC,IAAD,CAAUI,GAAI,aAIrB,6BACE,wBAAItD,UAAWC,IAAEsD,SAAjB,SACA,yBAAKvD,UAAWC,IAAEuD,oBAChB,kBAAC/B,EAAD,CAAgBI,WAAYA,EAAYE,SAZ7B,SAAC0B,GAChBrD,EAAM2C,MAAMU,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,YAazE,yBAAK7D,UAAWC,IAAE6D,oBAChB,yBAAK9D,UAAWC,IAAE8D,kBAAlB,gBACA,yBAAK/D,UAAWC,IAAE+D,kBAAlB,iEAEA,yBAAKhE,UAAWC,IAAEgE,0BAChB,yBAAKjE,UAAWC,IAAEiE,sBAChB,sCADF,0BAGA,yBAAKlE,UAAWC,IAAEiE,sBAChB,yCADF,SAKF,yBAAKlE,UAAWC,IAAEkE,sBAAlB","file":"static/js/7.c83908b0.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './FormControls.module.css';\r\nimport {Field, WrappedFieldProps, WrappedFieldMetaProps} from 'redux-form';\r\nimport { FieldValidatorType } from '../../../utils/validators/validators';\r\n\r\n\r\ntype FormControlPropsType = {\r\n  meta: WrappedFieldMetaProps\r\n  individerror: string\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta, individerror, children}) => {\r\n  let hasError = null;\r\n  if (individerror === \"onSubmit\") {\r\n    hasError = meta.error && meta.submitFailed;\r\n  } else {\r\n    hasError = meta.error && meta.touched;\r\n  }\r\n  return (\r\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n      <div>\r\n        {children}\r\n      </div>  \r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\ntype componentOwnPropsType = {\r\n  individerror: string\r\n  className: string\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps & componentOwnPropsType> = (props) => {\r\n  const {input, meta, ...restProps} = props\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps}></textarea>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\n\r\nexport const Input: React.FC<WrappedFieldProps & componentOwnPropsType> = (props) => {\r\n  const {input, meta, className, ...restProps} = props\r\n  return (\r\n    <FormControl {...props}> \r\n      <input {...input} {...restProps}/>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport const createField = <FormKeysType extends string> (placeholder: string, name: FormKeysType, // extends string - это ограничение на тип дженерика (только строка)\r\n  validators: Array<FieldValidatorType>, component: string | React.FC<WrappedFieldProps & componentOwnPropsType>, \r\n  type: string, props = {}) => {\r\n\r\n  return (\r\n    <div>\r\n      <Field validate={validators} \r\n           name={name} type={type}\r\n           component={component} placeholder={placeholder}\r\n           {...props}/>\r\n    </div>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__3IXMz\",\"error\":\"FormControls_error__3E5dj\",\"formSummaryError\":\"FormControls_formSummaryError__3P5bD\",\"formSummaryErrorWrap\":\"FormControls_formSummaryErrorWrap__38Pki\",\"formSummaryErrorLoginBlock\":\"FormControls_formSummaryErrorLoginBlock__1YgxW\",\"formTitle\":\"FormControls_formTitle__3_-M5\",\"formInput\":\"FormControls_formInput__2BV47\",\"formMiniBlock\":\"FormControls_formMiniBlock__2YIh3\",\"formMiniBlockCheckbox\":\"FormControls_formMiniBlockCheckbox__3uvHG\",\"formCheckbox\":\"FormControls_formCheckbox__VxbrM\",\"formButtonLogin\":\"FormControls_formButtonLogin__2Z-E2\",\"captchaImg\":\"FormControls_captchaImg__r4E-Y\",\"captchaInput\":\"FormControls_captchaInput__2gvhJ\",\"formLogin\":\"FormControls_formLogin__KL1id\",\"LoginWrapperGlobal\":\"FormControls_LoginWrapperGlobal__M4yOr\",\"LoginH1\":\"FormControls_LoginH1__3uBaE\",\"testAccountWrapper\":\"FormControls_testAccountWrapper__38leW\",\"testAccountTitle\":\"FormControls_testAccountTitle__3B183\",\"testAccountDescr\":\"FormControls_testAccountDescr__2rhWd\",\"testAccountMiniBlock\":\"FormControls_testAccountMiniBlock__3ZYX2\",\"testAccountMiniBlockWrap\":\"FormControls_testAccountMiniBlockWrap__1m69t\",\"testAccountAttention\":\"FormControls_testAccountAttention__2wZP8\"};","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n  if (value && value.length > maxLength) {\n    return `Max length is ${maxLength} symbols`;\n  } else {\n    return undefined;    \n  }\n}\n\nexport const required: FieldValidatorType = (value) => {\n  if (value) {\n    return undefined;\n  } else {\n    return \"Field is required\";    \n  }\n}\n\nexport const withoutSpace: FieldValidatorType = (value) => {\n  if (value) {\n    let str = value.replace(/\\s/g, '');\n    if (!str) {\n      return \"You entered only spaces\";\n    } else {\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n\n\n\n\n","import React from 'react';\r\nimport {reduxForm, InjectedFormProps} from 'redux-form';\r\nimport {Input} from '../../components/common/FormControls/FormControls';\r\nimport {required, maxLengthCreator, withoutSpace} from '../../utils/validators/validators';\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {createField} from '../common/FormControls/FormControls';\r\nimport s from \"../common/FormControls/FormControls.module.css\";\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\n\r\ntype LoginFormOwnProps = {\r\n  captchaUrl: string | null\r\n}\r\ntype LoginFormValuesType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean \r\n  captcha: string\r\n}\r\ntype LoginFormValuesKeysType = Extract<keyof LoginFormValuesType, string> // исключает все варианты, которые по типу не равны string\r\nconst maxLengthCreator50 = maxLengthCreator(50);\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) => {\r\n  return (\r\n    <form className={s.formLogin} onSubmit={handleSubmit}>\r\n      <div className={s.formMiniBlock}>\r\n        <div className={s.formTitle}>Email:</div>\r\n        <div className={s.formInput}>{createField<LoginFormValuesKeysType>(\"Email\", \"email\", [required, maxLengthCreator50, withoutSpace], Input, \"text\", {})}</div>\r\n      </div>\r\n      <div className={s.formMiniBlock}>\r\n        <div className={s.formTitle}>Password:</div>\r\n        <div className={s.formInput}>{createField<LoginFormValuesKeysType>(\"Password\", \"password\", [required, maxLengthCreator50, withoutSpace], Input, \"password\", {})}</div>\r\n      </div>\r\n      <div className={s.formMiniBlockCheckbox}>\r\n        <div className={s.formTitle}>Remember me:</div>\r\n        <div className={s.formCheckbox}>\r\n          {createField<LoginFormValuesKeysType>(\"\", \"rememberMe\", [], Input, \"checkbox\", {})}\r\n        </div>\r\n      </div>\r\n       \r\n      {captchaUrl && <div className={s.captchaWrap + ' ' + s.formMiniBlock}>\r\n        <div  className={s.captchaDescr}>Enter the characters from the image:</div>\r\n        <div  className={s.captchaImg + ' ' + s.formInput}><img src={captchaUrl} alt=\"Captcha\"/></div>\r\n        <div  className={s.captchaInput + ' ' + s.formInput}>{createField<LoginFormValuesKeysType>(\"Symbols from image\", \"captcha\", [required, withoutSpace], Input, \"text\", {})}</div>\r\n      </div>}\r\n\r\n      {error \r\n      && <div className={s.formSummaryErrorLoginBlock}>\r\n           <div className={s.formSummaryError}>{error}</div>\r\n         </div>\r\n      }   \r\n\r\n      <div><button className={s.formButtonLogin}>Login</button></div>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n  form: 'login'\r\n})(LoginForm);\r\n\r\n\r\n\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean\r\n  captchaUrl: string | null\r\n  authorizedUserId: number | null\r\n}\r\ntype MapDispatchPropsType = {\r\n  login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\ntype OwnPropsType = {}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\n\r\nconst Login: React.FC<PropsType> = (props) => {\r\n  let captchaUrl = props.captchaUrl;\r\n  \r\n  const onSubmit = (formData: LoginFormValuesType) => {\r\n    props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n  }\r\n  \r\n  if (props.isAuth) {\r\n    return <Redirect to={\"/profile\"}/>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className={s.LoginH1}>LOGIN</h1>\r\n      <div className={s.LoginWrapperGlobal}>\r\n        <LoginReduxForm captchaUrl={captchaUrl} onSubmit={onSubmit}/>\r\n\r\n        <div className={s.testAccountWrapper}>\r\n          <div className={s.testAccountTitle}>Test account</div>\r\n          <div className={s.testAccountDescr}>if you are an employer, you can use a test account to log in.</div>\r\n          \r\n          <div className={s.testAccountMiniBlockWrap}>\r\n            <div className={s.testAccountMiniBlock}>\r\n              <b>Email: </b>siseros589@mailhub.pro\r\n            </div>\r\n            <div className={s.testAccountMiniBlock}>\r\n              <b>Password: </b>free\r\n            </div>\r\n          </div>  \r\n\r\n          <div className={s.testAccountAttention}>Attention! This account has a limit on server requests</div>      \r\n        </div>\r\n      </div>      \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl,\r\n    authorizedUserId: state.auth.userId \r\n  }\r\n}\r\nlet mapDispatchToProps: MapDispatchPropsType = {\r\n  login\r\n}\r\n\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps)(Login);"],"sourceRoot":""}