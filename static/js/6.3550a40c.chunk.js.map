{"version":3,"sources":["components/common/FormControls/FormControls.jsx","components/common/FormControls/FormControls.module.css","utils/validators/validators.js","components/Login/Login.jsx"],"names":["FormControl","props","hasError","individerror","meta","error","submitFailed","touched","className","s","formControl","children","Textarea","input","restProps","child","element","Input","createField","placeholder","name","validators","component","type","text","validate","module","exports","maxLengthCreator","maxLength","value","length","required","withoutSpace","replace","maxLengthCreator50","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","formLogin","onSubmit","formMiniBlock","formTitle","formInput","formMiniBlockCheckbox","formCheckbox","captchaWrap","captchaDescr","captchaImg","src","alt","captchaInput","formSummaryErrorLoginBlock","formSummaryError","formButtonLogin","mapDispatchToProps","login","connect","state","isAuth","auth","to","LoginH1","LoginWrapperGlobal","formData","email","password","rememberMe","captcha","testAccountWrapper","testAccountTitle","testAccountDescr","testAccountMiniBlockWrap","testAccountMiniBlock"],"mappings":"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","file":"static/js/6.3550a40c.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './FormControls.module.css';\r\nimport {Field} from 'redux-form';\r\n\r\n\r\n\r\nexport const FormControl = (props) => {\r\n  let hasError = null;\r\n  if (props.individerror === \"onSubmit\") {\r\n    hasError = props.meta.error && props.meta.submitFailed;\r\n  } else {\r\n    hasError = props.meta.error && props.meta.touched;\r\n  }\r\n  return (\r\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n      <div>\r\n        {props.children}\r\n      </div>  \r\n      {hasError && <span>{props.meta.error}</span>}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport const Textarea = (props) => {\r\n  const {input, meta, child, element, ...restProps} = props;\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps}></textarea>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\n\r\nexport const Input = (props) => {\r\n  const {input, meta, child, element, ...restProps} = props;\r\n  return (\r\n    <FormControl {...props}> \r\n      <input {...input} {...restProps}/>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\n\r\nexport const createField = (placeholder, name, validators, component, type, props = {}, text = \"\", individerror) => {\r\n  return (\r\n    <div>\r\n      <Field validate={validators} \r\n           name={name} type={type}\r\n           component={component} placeholder={placeholder}\r\n           {...props} individerror={individerror}/>\r\n      {text}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__3IXMz\",\"error\":\"FormControls_error__3E5dj\",\"formSummaryError\":\"FormControls_formSummaryError__3P5bD\",\"formSummaryErrorWrap\":\"FormControls_formSummaryErrorWrap__38Pki\",\"formSummaryErrorLoginBlock\":\"FormControls_formSummaryErrorLoginBlock__1YgxW\",\"formTitle\":\"FormControls_formTitle__3_-M5\",\"formInput\":\"FormControls_formInput__2BV47\",\"formMiniBlock\":\"FormControls_formMiniBlock__2YIh3\",\"formMiniBlockCheckbox\":\"FormControls_formMiniBlockCheckbox__3uvHG\",\"formCheckbox\":\"FormControls_formCheckbox__VxbrM\",\"formButtonLogin\":\"FormControls_formButtonLogin__2Z-E2\",\"captchaImg\":\"FormControls_captchaImg__r4E-Y\",\"captchaInput\":\"FormControls_captchaInput__2gvhJ\",\"formLogin\":\"FormControls_formLogin__KL1id\",\"LoginWrapperGlobal\":\"FormControls_LoginWrapperGlobal__M4yOr\",\"LoginH1\":\"FormControls_LoginH1__3uBaE\",\"testAccountWrapper\":\"FormControls_testAccountWrapper__38leW\",\"testAccountTitle\":\"FormControls_testAccountTitle__3B183\",\"testAccountDescr\":\"FormControls_testAccountDescr__2rhWd\",\"testAccountMiniBlock\":\"FormControls_testAccountMiniBlock__3ZYX2\",\"testAccountMiniBlockWrap\":\"FormControls_testAccountMiniBlockWrap__1m69t\"};","\nexport const maxLengthCreator = (maxLength) => (value) => {\n  if (value && value.length > maxLength) {\n    return `Max length is ${maxLength} symbols`;\n  } else {\n    return undefined;    \n  }\n}\n\nexport const required = value => {\n  if (value) {\n    return undefined;\n  } else {\n    return \"Field is required\";    \n  }\n}\n\nexport const withoutSpace = (value) => {\n  if (value) {\n    let str = value.replace(/\\s/g, '');\n    if (!str) {\n      return \"You entered only spaces\";\n    } else {\n      return undefined;\n    }\n  }\n}\n\n\n\n\n","import React from 'react';\r\nimport {reduxForm} from 'redux-form';\r\nimport {Input} from '../../components/common/FormControls/FormControls';\r\nimport {required, maxLengthCreator, withoutSpace} from '../../utils/validators/validators';\r\nimport {connect} from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {createField} from '../common/FormControls/FormControls';\r\nimport s from \"../common/FormControls/FormControls.module.css\";\r\n\r\n\r\nconst maxLengthCreator50 = maxLengthCreator(50);\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}) => {\r\n  return (\r\n    <form className={s.formLogin} onSubmit={handleSubmit}>\r\n      <div className={s.formMiniBlock}>\r\n        <div className={s.formTitle}>Email:</div>\r\n        <div className={s.formInput}>{createField(\"Email\", \"email\", [required, maxLengthCreator50, withoutSpace], Input, \"text\", {})}</div>\r\n      </div>\r\n      <div className={s.formMiniBlock}>\r\n        <div className={s.formTitle}>Password:</div>\r\n        <div className={s.formInput}>{createField(\"Password\", \"password\", [required, maxLengthCreator50, withoutSpace], Input, \"password\", {})}</div>\r\n      </div>\r\n      <div className={s.formMiniBlockCheckbox}>\r\n        <div className={s.formTitle}>Remember me:</div>\r\n        <div className={s.formCheckbox}>\r\n          {createField(\"\", \"rememberMe\", [], Input, \"checkbox\", {})}\r\n        </div>\r\n      </div>\r\n       \r\n      {captchaUrl && <div className={s.captchaWrap + ' ' + s.formMiniBlock}>\r\n        <div  className={s.captchaDescr}>Enter the characters from the image:</div>\r\n        <div  className={s.captchaImg + ' ' + s.formInput}><img src={captchaUrl} alt=\"Captcha\"/></div>\r\n        <div  className={s.captchaInput + ' ' + s.formInput}>{createField(\"Symbols from image\", \"captcha\", [required, withoutSpace], Input, \"text\", {})}</div>\r\n      </div>}\r\n\r\n      {error \r\n      && <div className={s.formSummaryErrorLoginBlock}>\r\n           <div className={s.formSummaryError}>{error}</div>\r\n         </div>\r\n      }   \r\n\r\n      <div><button className={s.formButtonLogin}>Login</button></div>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({\r\n  form: 'login'\r\n})(LoginForm);\r\n\r\n\r\nconst Login = (props) => {\r\n  let captchaUrl = props.captchaUrl;\r\n  \r\n  const onSubmit = (formData) => {\r\n    props.login(formData.email, formData.password, formData.rememberMe, true, formData.captcha);\r\n  }\r\n  \r\n  if (props.isAuth) {\r\n    return <Redirect to={\"/profile\"}/>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className={s.LoginH1}>LOGIN</h1>\r\n      <div className={s.LoginWrapperGlobal}>\r\n        <LoginReduxForm captchaUrl={captchaUrl} onSubmit={onSubmit}/>\r\n\r\n        <div className={s.testAccountWrapper}>\r\n          <div className={s.testAccountTitle}>Test account</div>\r\n          <div className={s.testAccountDescr}>if you are an employer, you can use a test account to log in.</div>\r\n          \r\n          <div className={s.testAccountMiniBlockWrap}>\r\n            <div className={s.testAccountMiniBlock}>\r\n              <b>Email: </b>free@samuraijs.com\r\n            </div>\r\n            <div className={s.testAccountMiniBlock}>\r\n              <b>Password: </b>free\r\n            </div>\r\n          </div>        \r\n        </div>\r\n      </div>      \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n  }\r\n}\r\nlet mapDispatchToProps = {\r\n  login\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);"],"sourceRoot":""}