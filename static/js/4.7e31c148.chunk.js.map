{"version":3,"sources":["components/common/FormControls/FormControls.tsx","components/common/FormControls/FormControls.module.css","utils/validators/validators.ts","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","assets/postImg.webp","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["FormControl","meta","individerror","children","hasError","error","submitFailed","touched","className","s","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","type","validate","module","exports","maxLengthCreator","maxLength","value","length","required","withoutSpace","replace","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","Post","item","src","postImg","alt","itemMessage","message","itemLikes","likesCount","MyPosts","React","memo","postsElements","posts","map","p","key","id","postsBlock","MyPostsReduxForm","onSubmit","values","newPostText","addPost","reverse","maxLengthCreator10","reduxForm","form","onSubmitSuccess","result","dispatch","reset","handleSubmit","formMyPosts","formMyPostsField","cols","rows","formMyPostsButton","mapDispatchToProps","profileActions","addPostActionCreator","MyPostsContainer","connect","state","profilePage","ProfileStatusWithHooks","idComparison","isOwner","statusFromProps","updateStatus","authorizedUserId","useState","editMode","setEditMode","status","setStatus","errorStatus","setErrorStatus","useEffect","match","params","userId","ownerExpression","statusFromState","statusFromStateTitle","statusFromStateInput","onChange","e","currentTarget","autoFocus","onBlur","Promise","catch","onDoubleClick","ProfileInfo","profile","saveProfile","savePhoto","Number","pCPreloaderBlock","pCPreloader","Preloader","descriptionBlock","photos","large","iconImg","file","target","files","htmlFor","ProfileDataFormReduxForm","initialValues","formData","then","goToEditMode","profileForm","profileMiniBlock","profileMiniBlockCheckbox","keys","contacts","Contact","profileFormButtonSave","s2","formSummaryErrorWrap","formSummaryError","ProfileData","noInfo","formInfo","formInfoTitle","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ContactMain","filter","contactTitle","contactValue","formButtonEdit","onClick","ContactLink","rel","href","Profile","content","ProfileContainer","isUserIdRedirect","activateEditMode","setState","this","setUserProfileThunk","getStatusThunk","setPhotosMeThunk","refreshProfile","prevProps","prevState","snapshot","to","isFetching","notFoundUser","savePhotoThunk","saveProfileThunk","updateStatusThunk","Component","compose","withRouter","auth","isAuth","usersPage"],"mappings":"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","file":"static/js/4.7e31c148.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './FormControls.module.css';\r\nimport {Field, WrappedFieldProps, WrappedFieldMetaProps} from 'redux-form';\r\nimport { FieldValidatorType } from '../../../utils/validators/validators';\r\n\r\n\r\ntype FormControlPropsType = {\r\n  meta: WrappedFieldMetaProps\r\n  individerror: string\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta, individerror, children}) => {\r\n  let hasError = null;\r\n  if (individerror === \"onSubmit\") {\r\n    hasError = meta.error && meta.submitFailed;\r\n  } else {\r\n    hasError = meta.error && meta.touched;\r\n  }\r\n  return (\r\n    <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n      <div>\r\n        {children}\r\n      </div>  \r\n      {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\ntype componentOwnPropsType = {\r\n  individerror: string\r\n  className: string\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps & componentOwnPropsType> = (props) => {\r\n  const {input, meta, ...restProps} = props\r\n  return (\r\n    <FormControl {...props}>\r\n      <textarea {...input} {...restProps}></textarea>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\n\r\nexport const Input: React.FC<WrappedFieldProps & componentOwnPropsType> = (props) => {\r\n  const {input, meta, className, ...restProps} = props\r\n  return (\r\n    <FormControl {...props}> \r\n      <input {...input} {...restProps}/>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport const createField = <FormKeysType extends string> (placeholder: string, name: FormKeysType, // extends string - это ограничение на тип дженерика (только строка)\r\n  validators: Array<FieldValidatorType>, component: string | React.FC<WrappedFieldProps & componentOwnPropsType>, \r\n  type: string, props = {}) => {\r\n\r\n  return (\r\n    <div>\r\n      <Field validate={validators} \r\n           name={name} type={type}\r\n           component={component} placeholder={placeholder}\r\n           {...props}/>\r\n    </div>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__3IXMz\",\"error\":\"FormControls_error__3E5dj\",\"formSummaryError\":\"FormControls_formSummaryError__3P5bD\",\"formSummaryErrorWrap\":\"FormControls_formSummaryErrorWrap__38Pki\",\"formSummaryErrorLoginBlock\":\"FormControls_formSummaryErrorLoginBlock__1YgxW\",\"formTitle\":\"FormControls_formTitle__3_-M5\",\"formInput\":\"FormControls_formInput__2BV47\",\"formMiniBlock\":\"FormControls_formMiniBlock__2YIh3\",\"formMiniBlockCheckbox\":\"FormControls_formMiniBlockCheckbox__3uvHG\",\"formCheckbox\":\"FormControls_formCheckbox__VxbrM\",\"formButtonLogin\":\"FormControls_formButtonLogin__2Z-E2\",\"captchaImg\":\"FormControls_captchaImg__r4E-Y\",\"captchaInput\":\"FormControls_captchaInput__2gvhJ\",\"formLogin\":\"FormControls_formLogin__KL1id\",\"LoginWrapperGlobal\":\"FormControls_LoginWrapperGlobal__M4yOr\",\"LoginH1\":\"FormControls_LoginH1__3uBaE\",\"testAccountWrapper\":\"FormControls_testAccountWrapper__38leW\",\"testAccountTitle\":\"FormControls_testAccountTitle__3B183\",\"testAccountDescr\":\"FormControls_testAccountDescr__2rhWd\",\"testAccountMiniBlock\":\"FormControls_testAccountMiniBlock__3ZYX2\",\"testAccountMiniBlockWrap\":\"FormControls_testAccountMiniBlockWrap__1m69t\",\"testAccountAttention\":\"FormControls_testAccountAttention__2wZP8\"};","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n  if (value && value.length > maxLength) {\n    return `Max length is ${maxLength} symbols`;\n  } else {\n    return undefined;    \n  }\n}\n\nexport const required: FieldValidatorType = (value) => {\n  if (value) {\n    return undefined;\n  } else {\n    return \"Field is required\";    \n  }\n}\n\nexport const withoutSpace: FieldValidatorType = (value) => {\n  if (value) {\n    let str = value.replace(/\\s/g, '');\n    if (!str) {\n      return \"You entered only spaces\";\n    } else {\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n\n\n\n\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__tKWPT\",\"notFoundUser\":\"Profile_notFoundUser__2GZru\",\"pCPreloaderBlock\":\"Profile_pCPreloaderBlock__2hzdp\",\"pCPreloader\":\"Profile_pCPreloader__gMZDH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__61rKU\",\"posts\":\"MyPosts_posts__3g6Qi\",\"formMyPosts\":\"MyPosts_formMyPosts__3I0Tz\",\"formMyPostsField\":\"MyPosts_formMyPostsField__2fTdO\",\"formMyPostsButton\":\"MyPosts_formMyPostsButton__1oSsF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__36nBg\",\"itemMessage\":\"Post_itemMessage__NGknN\",\"itemLikes\":\"Post_itemLikes__TWY18\"};","module.exports = __webpack_public_path__ + \"static/media/postImg.2c383599.webp\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__bRlmF\",\"Contact\":\"ProfileInfo_Contact__HKjXw\",\"ContactMain\":\"ProfileInfo_ContactMain__3w6ne\",\"ContactLink\":\"ProfileInfo_ContactLink__3nMaE\",\"file\":\"ProfileInfo_file__HNWgP\",\"formButtonEdit\":\"ProfileInfo_formButtonEdit__CZKAC\",\"formInfo\":\"ProfileInfo_formInfo__3AJpe\",\"formInfoTitle\":\"ProfileInfo_formInfoTitle__2vJuw\",\"profileForm\":\"ProfileInfo_profileForm__35S3y\",\"profileMiniBlock\":\"ProfileInfo_profileMiniBlock__2YjzB\",\"profileMiniBlockCheckbox\":\"ProfileInfo_profileMiniBlockCheckbox__1ZHQf\",\"profileFormButtonSave\":\"ProfileInfo_profileFormButtonSave__3KkKV\",\"pCPreloaderBlock\":\"ProfileInfo_pCPreloaderBlock__1eosr\",\"pCPreloader\":\"ProfileInfo_pCPreloader__17HO3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorStatus\":\"ProfileStatusWithHooks_errorStatus__1Z21o\",\"statusFromProps\":\"ProfileStatusWithHooks_statusFromProps__3EacN\",\"statusFromState\":\"ProfileStatusWithHooks_statusFromState__1PzQ0\",\"statusFromStateInput\":\"ProfileStatusWithHooks_statusFromStateInput__16Soi\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport postImg from '../../../../assets/postImg.webp';\r\n\r\n\r\ntype PropsType = {\r\n  message: string,\r\n  likesCount: number\r\n}\r\n\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n  return (\r\n   <div className={s.item}>\r\n    <img src={postImg} alt=\"img\"/>\r\n     <div className={s.itemMessage}>{props.message}</div>\r\n     <div>\r\n       <span className={s.itemLikes}>likes:</span> {props.likesCount}\r\n     </div>\r\n   </div>       \r\n  );\r\n}\r\n\r\n\r\nexport default Post;\r\n\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {reduxForm, reset, InjectedFormProps} from 'redux-form';\r\nimport {Textarea, createField} from '../../common/FormControls/FormControls';\r\nimport {required, maxLengthCreator, withoutSpace} from '../../../utils/validators/validators';\r\nimport { PostType, DispatchType } from '../../../types/types';\r\n\r\n\r\ntype PropsType = {\r\n  posts: PostType[],\r\n  addPost: (newPostText: string) => void\r\n}\r\n\r\n\r\nconst MyPosts = React.memo<PropsType>((props) => {\r\n  let postsElements = props.posts.map((p: PostType) => \r\n    <Post key={p.id} message={p.message} likesCount={p.likesCount}/> \r\n  );\r\n\r\n  let onAddPost = (values: AddPostNewFormValuesType) => {\r\n    (!!values.newPostText) && props.addPost(values.newPostText);\r\n  }\r\n\r\n  return (\r\n     <div className={s.postsBlock}>\r\n       <h3>My posts</h3>\r\n       <MyPostsReduxForm onSubmit={onAddPost}/>\r\n\r\n       <div className={s.posts}>\r\n         { postsElements.reverse() }\r\n       </div>\r\n     </div>        \r\n  );\r\n});\r\n\r\n\r\n\r\ntype AddPostNewFormValuesType = {\r\n  newPostText: string\r\n}\r\ntype AddPostNewFormValuesKeysType = Extract<keyof AddPostNewFormValuesType, string>\r\nconst maxLengthCreator10 = maxLengthCreator(10);\r\n\r\nconst AddPostNewForm: React.FC<InjectedFormProps<AddPostNewFormValuesType>> = ({handleSubmit}) => {\r\n  return (\r\n    <form className={s.formMyPosts} onSubmit={handleSubmit}>\r\n      <div>\r\n      {createField<AddPostNewFormValuesKeysType>(\"Post message\", \"newPostText\", [required, maxLengthCreator10, withoutSpace], \r\n        Textarea, \"text\", {individerror: \"onSubmit\", className: s.formMyPostsField, cols: \"30\", rows: \"2\"})}\r\n      </div> \r\n      <div>\r\n        <button className={s.formMyPostsButton}>Add post</button>\r\n      </div>        \r\n    </form>\r\n  );\r\n}\r\n\r\nconst afterSubmit = (result: object, dispatch: DispatchType) =>\r\n  dispatch(reset('ProfileAddPostNewForm'));\r\n  \r\nconst MyPostsReduxForm = reduxForm<AddPostNewFormValuesType>({\r\n  form: 'ProfileAddPostNewForm',\r\n  onSubmitSuccess: afterSubmit,\r\n})(AddPostNewForm);\r\n\r\n\r\n// class MyPosts extends React.PureComponent {\r\n//   // shouldComponentUpdate(nextProps, nextState) {\r\n//   //   return nextProps !== this.props || nextState !== this.state;\r\n//   // }\r\n\r\n//   // // let newPostElement = React.createRef();\r\n//   // // let onAddPost = () => {\r\n//   // //   props.addPost();\r\n//   // // }\r\n\r\n//   // // let onPostChange = () => {\r\n//   // //   let text = newPostElement.current.value;\r\n//   // // }\r\n\r\n//   render() {...}\r\n// }\r\n\r\n\r\nexport default MyPosts;\r\n\r\n\r\n","import MyPosts from './MyPosts';\r\nimport {profileActions} from '../../../redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostType } from '../../../types/types';\r\n\r\n\r\ntype MapStatePropsType = {\r\n  posts: PostType[],\r\n  newPostText: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n  addPost: (newPostText: string) => void\r\n}\r\ntype OwnPropsType = {}\r\n// type PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n  }\r\n}\r\nlet mapDispatchToProps = {\r\n  addPost: profileActions.addPostActionCreator\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n\r\n","import React, {useState, useEffect, ChangeEvent} from 'react';\r\nimport s from './ProfileStatusWithHooks.module.css';\r\n\r\n\r\ntype PropsType = {\r\n  statusFromProps: string\r\n  authorizedUserId: number | null\r\n  isOwner: boolean\r\n  match: any\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = ({isOwner, statusFromProps, updateStatus, authorizedUserId, ...props}) => {\r\n  let [editMode, setEditMode] = useState<boolean>(false)\r\n  let [status, setStatus] = useState(statusFromProps)\r\n  let [errorStatus, setErrorStatus] = useState<string | null>(null)\r\n  \r\n  useEffect(() => { // срабатывает в самом конце компоненты\r\n    setStatus(statusFromProps)\r\n  }, [statusFromProps]) // определяется зависимость в []\r\n  // отрисовки (первый раз в любом случае, а дальше по зависимости)\r\n\r\n  let idComparison: boolean\r\n  if (authorizedUserId !== null) {\r\n    idComparison = +authorizedUserId === +props.match.params.userId\r\n  } else {\r\n    idComparison = false\r\n  }\r\n  let ownerExpression = isOwner || idComparison\r\n\r\n  const activateMode = () => {\r\n    if(ownerExpression) {\r\n      setEditMode(true);\r\n    }\r\n  }\r\n  const deactivateEditMode = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.currentTarget.value.length <= 300) {\r\n      setEditMode(false);\r\n      new Promise(() => updateStatus(status))\r\n      .catch((error: string) => {\r\n        setErrorStatus(error);\r\n      })\r\n    } \r\n  }  \r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.currentTarget.value.length <= 301) {\r\n      setStatus(e.currentTarget.value);\r\n      setErrorStatus(null);\r\n    }\r\n    if (e.currentTarget.value.length === 301 || e.currentTarget.value.length > 301)  {\r\n      setErrorStatus(\"Max Status length is 300 symbols\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {!editMode\r\n      ? <div className={s.statusFromProps}>\r\n          <span onDoubleClick={activateMode}>\r\n            {statusFromProps\r\n            ? `\"${statusFromProps}\"` \r\n            : `\"no information\"`}\r\n          </span>\r\n        </div>\r\n      : <div className={s.statusFromState}>\r\n          <b className={s.statusFromStateTitle}>Status: </b>\r\n\r\n          {ownerExpression\r\n          && <input className={s.statusFromStateInput} onChange={onStatusChange} \r\n          autoFocus={true} \r\n          onBlur={deactivateEditMode} \r\n          value={status || ''}></input>} \r\n\r\n          {errorStatus && <div className={s.errorStatus}>{errorStatus}</div> } \r\n        </div>}        \r\n    </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React, {useState, ChangeEvent} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport {createField, Input, Textarea} from '../../common/FormControls/FormControls';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport {reduxForm, InjectedFormProps} from 'redux-form';\r\nimport s2 from \"../../common/FormControls/FormControls.module.css\";\r\nimport iconImg from '../../../assets/user.svg';\r\nimport { ProfileType, ContactsType } from '../../../types/types';\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n  isOwner: boolean\r\n  authorizedUserId: number | null\r\n  profile: ProfileType | null\r\n  status: string\r\n  match: any\r\n  savePhoto: (photoFile: File, myId: number) => void\r\n  saveProfile: (profile: ProfileType) => void\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({isOwner, authorizedUserId, match, profile, saveProfile, savePhoto, status, updateStatus}) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n\r\n  let ownerExpression = isOwner || Number(authorizedUserId) === Number(match.params.userId)\r\n\r\n  if(!profile) {\r\n    return (\r\n      <div className={s.pCPreloaderBlock}>\r\n        <div className={s.pCPreloader}>\r\n          <Preloader />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const onSubmit = (formData: ProfileDataFormValues) => {\r\n    // todo: изменить подход then на props\r\n    new Promise(() => saveProfile({...profile, ...formData}))\r\n      .then(() => {\r\n        setEditMode(false);\r\n      });    \r\n  }\r\n  \r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length > 0 && authorizedUserId) {\r\n      savePhoto(e.target.files[0], authorizedUserId);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.descriptionBlock}>\r\n        <img src={profile.photos.large !== null \r\n          ? profile.photos.large \r\n          : iconImg } alt=\"photos-user\"/>\r\n          \r\n        {ownerExpression \r\n        && <div className={s.file}>\r\n             <input id={\"inputFileImg\"} type={\"file\"} onChange={onMainPhotoSelected} />\r\n             <label htmlFor=\"inputFileImg\">Сhange photo</label>\r\n           </div>}\r\n\r\n        <ProfileStatusWithHooks statusFromProps={status}\r\n                                isOwner={isOwner}\r\n                                authorizedUserId={authorizedUserId}\r\n                                match={match}\r\n                                updateStatus={updateStatus}/>\r\n\r\n        {editMode \r\n        ? <ProfileDataFormReduxForm profile={profile} initialValues={profile} onSubmit={onSubmit}/> \r\n        : <ProfileData goToEditMode={() => {setEditMode(true)}} profile={profile} ownerExpression={ownerExpression}/>}       \r\n      \r\n      </div>      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n\r\n\r\n\r\ntype ProfileDataOwnProps = {\r\n  profile: ProfileType | null\r\n}\r\n\r\ntype ProfileDataFormValues = {\r\n  aboutMe: string\r\n  contacts: ContactsType\r\n  lookingForAJob: boolean \r\n  lookingForAJobDescription: string\r\n  fullName: string\r\n}\r\n\r\ntype ProfileDataFormKeys = Extract<keyof ProfileDataFormValues, string>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormValues, ProfileDataOwnProps> & ProfileDataOwnProps> = ({profile, error, handleSubmit}) => {\r\n  return (\r\n    <form className={s.profileForm} onSubmit={handleSubmit}>      \r\n      <div className={s.profileMiniBlock}>\r\n        <b>Full name: </b> \r\n        {createField<ProfileDataFormKeys>(\"Full name\", \"fullName\", [], Input, \"text\", {})}\r\n      </div>\r\n      <div className={s.profileMiniBlock}>\r\n        <b>Loking for a job: </b>\r\n        <div className={s.profileMiniBlockCheckbox}>{createField<ProfileDataFormKeys>(\"\", \"lookingForAJob\", [], Input, \"checkbox\", {})}</div>\r\n      </div>\r\n      <div className={s.profileMiniBlock}>\r\n        <b>My professional skills: </b>\r\n        {createField<ProfileDataFormKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea, \"text\", {})}          \r\n      </div>\r\n      <div className={s.profileMiniBlock}>\r\n        <b>About me: </b>\r\n        {createField<ProfileDataFormKeys>(\"About me\", \"aboutMe\", [], Textarea, \"text\", {})}\r\n      </div>\r\n\r\n      <div className={s.profileMiniBlock}>\r\n        <b>Contacts: </b> {profile && Object.keys(profile.contacts)\r\n        .map(key => <div key={key} className={s.Contact}>\r\n          <b>{key}:</b> {/* todo: сделать дженерик тип для этого поля*/} {createField(key, `contacts.${key}`, [], Input, \"text\", {})}\r\n        </div>)}\r\n      </div>\r\n\r\n      <div>\r\n        <button className={s.profileFormButtonSave}>Save</button>\r\n      </div>\r\n      {error \r\n      && <div className={s2.formSummaryErrorWrap}>\r\n           <div className={s2.formSummaryError}>{error}</div> \r\n         </div>\r\n      /*Общая ошибка, работает в profile-reducer, если там только _error */}\r\n    </form>\r\n  );\r\n}\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileDataFormValues, ProfileDataOwnProps>({\r\n  form: 'edit-profile'\r\n})(ProfileDataForm);\r\n\r\n\r\n\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType | null\r\n  ownerExpression: boolean\r\n  goToEditMode: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, ownerExpression, goToEditMode}) => {\r\n  const noInfo = \"no information\"\r\n  type ContactsKeysType = keyof ContactsType\r\n\r\n  return (\r\n    <>\r\n      {profile && \r\n        <div className={s.formInfo}>      \r\n          <div className={s.formInfoTitle}>\r\n            <b>Full name: </b> {profile.fullName}\r\n          </div>\r\n          <div className={s.formInfoTitle}>\r\n            <b>Loking for a job: </b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n          </div>\r\n          {profile.lookingForAJob && \r\n            <div className={s.formInfoTitle}>\r\n              <b>My professional skills: </b> {profile.lookingForAJobDescription}\r\n            </div>\r\n          }\r\n          <div className={s.formInfoTitle}>\r\n            <b>About me: </b> {profile.aboutMe || noInfo}\r\n          </div>\r\n          <div className={s.formInfoTitle}>\r\n            <b className={s.ContactMain}>Contacts: </b> \r\n            {profile \r\n              ? (\r\n                  Object.keys(profile.contacts).filter(key => (profile.contacts[key as ContactsKeysType]) || false).length > 0\r\n                  ? Object.keys(profile.contacts).filter(key => (profile.contacts[key as ContactsKeysType]) || false)\r\n                    .map(key => \r\n                      <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as ContactsKeysType]}/>\r\n                    )\r\n                  : noInfo\r\n                ) \r\n              : noInfo\r\n            }\r\n          </div>\r\n          {ownerExpression && \r\n            <div>\r\n              <button className={s.formButtonEdit} onClick={goToEditMode}>Edit</button>\r\n            </div>\r\n          }\r\n        </div>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\n\r\ntype ContactPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n  return (\r\n    <div className={s.Contact}>\r\n      <b>{contactTitle}: </b>\r\n      <a className={s.ContactLink} target=\"_blank\" rel=\"noopener noreferrer\" href={contactValue}>\r\n        {contactValue}\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport { ProfileType } from '../../types/types';\r\n\r\n\r\ntype PropsType = {\r\n  isOwner: boolean\r\n  authorizedUserId: number | null\r\n  profile: ProfileType | null\r\n  status: string\r\n  savePhoto: (photoFile: File, myId: number) => void\r\n  saveProfile: (profile: ProfileType) => void\r\n  updateStatus: (status: string) => void\r\n  match: any\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n  return (\r\n   <div className={s.content}>\r\n     <ProfileInfo profile={props.profile}\r\n                  isOwner={props.isOwner}\r\n                  status={props.status}\r\n                  authorizedUserId={props.authorizedUserId}\r\n                  savePhoto={props.savePhoto}\r\n                  saveProfile={props.saveProfile}\r\n                  updateStatus={props.updateStatus}\r\n                  match={props.match} />\r\n                  \r\n     {( (Number(props.match.params.userId) === Number(props.authorizedUserId)) || (!props.match.params.userId) ) \r\n     && <MyPostsContainer />} \r\n   </div>\r\n  );\r\n}\r\n\r\n\r\nexport default Profile;\r\n\r\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {withRouter, Redirect, RouteComponentProps} from 'react-router-dom';\r\nimport {setUserProfileThunk, savePhotoThunk, saveProfileThunk,\r\n getStatusThunk, updateStatusThunk} from '../../redux/profile-reducer';\r\nimport {setPhotosMeThunk} from '../../redux/auth-reducer';\r\nimport {compose} from 'redux';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport s from './Profile.module.css';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { ProfileType } from '../../types/types';\r\n\r\n\r\ntype MapStatePropsType = {\r\n  profile: ProfileType | null,\r\n\tstatus: string,\r\n\tauthorizedUserId: number | null,\r\n\tisAuth: boolean,\r\n\tisFetching: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n  savePhotoThunk: (photoFile: File, myId: number) => void\r\n  saveProfileThunk: (profile: ProfileType) => void\r\n  updateStatusThunk: (status: string) => void\r\n\tgetStatusThunk: (userId: number) => void\r\n\tsetPhotosMeThunk: (userId: number) => void\r\n\tsetUserProfileThunk: (userId: number) => void\r\n}\r\ntype OwnPropsType = {}\r\ntype PathParamsType = {\r\n\tuserId: string\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\tstate = {\r\n\t\tisUserIdRedirect: false,\r\n\t\teditMode: false\r\n\t}\t\r\n\r\n  activateEditMode = () => {\r\n    this.setState({\r\n      isUserIdRedirect: true\r\n\t\t});\r\n  }\r\n\r\n\trefreshProfile() {\r\n\t\tlet userId: number = Number(this.props.match.params.userId);\r\n\t\tif(!userId) {\r\n\t\t\tthis.props.authorizedUserId && (userId = this.props.authorizedUserId)\r\n\t\t\tif(!userId) {\r\n\t\t\t\tthis.activateEditMode();\r\n\r\n\t\t\t\t// this.props.history.push(\"/login\"); // аналог redirect, \r\n\t\t\t\t// //   но он внедряется в методы жизненных циклов, \r\n\t\t\t\t// //   поэтому лучше использовать реже такой вариант, \r\n\t\t\t\t// //   и вместо него использувать обычный redirect через jsx\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (userId) {\r\n\t\t\tnew Promise(() => this.props.setUserProfileThunk(userId))\r\n\t\t\t.catch(()=>{\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\teditMode: true\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\tthis.props.getStatusThunk(userId);\r\n\t\t\tthis.props.authorizedUserId && this.props.setPhotosMeThunk(this.props.authorizedUserId);\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.refreshProfile();\r\n\t} \r\n\r\n\tcomponentDidUpdate(prevProps: PropsType, prevState: any, snapshot: any) {\r\n\t\tif (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n\t\t\tthis.refreshProfile();\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.isUserIdRedirect) return <Redirect to={'/login'} />\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t{this.props.isFetching \r\n\t\t\t\t? <div className={s.pCPreloaderBlock}><div className={s.pCPreloader}><Preloader /></div></div>\r\n\t\t\t\t: (this.state.editMode ? <div className={s.notFoundUser}>Sorry, but something went wrong...</div> : <Profile\r\n\t\t\t\tisOwner={!this.props.match.params.userId}\r\n\t\t\t\tauthorizedUserId={this.props.authorizedUserId}\r\n\t\t\t\tprofile={this.props.profile} \r\n\t\t\t\tstatus={this.props.status}\r\n\t\t\t\tsavePhoto={this.props.savePhotoThunk}\r\n\t\t\t\tsaveProfile={this.props.saveProfileThunk}\r\n\t\t\t\tupdateStatus={this.props.updateStatusThunk}\r\n\t\t\t\tmatch={this.props.match}/>) }\r\n\t\t\t</>\t\t \r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n\t\tprofile: state.profilePage.profile,\r\n\t\tstatus: state.profilePage.status,\r\n\t\tauthorizedUserId: state.auth.userId,\r\n\t\tisAuth: state.auth.isAuth,\r\n\t\tisFetching: state.usersPage.isFetching\r\n  }\r\n}\r\nlet mapDispatchToProps: MapDispatchPropsType = {\r\n\tsetUserProfileThunk,\r\n\tgetStatusThunk,\r\n\tupdateStatusThunk,\r\n\tsavePhotoThunk,\r\n\tsaveProfileThunk,\r\n\tsetPhotosMeThunk\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n\twithRouter,\r\n\tconnect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, mapDispatchToProps)\r\n)(ProfileContainer);\r\n\r\n"],"sourceRoot":""}